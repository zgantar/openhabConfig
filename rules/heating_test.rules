import org.openhab.core.library.types.*
import org.openhab.action.mail.*
import org.openhab.core.library.items.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.joda.time.*
import java.util.Calendar

var Timer timerDelay = null
var Integer timeOut = 30
var Integer MotionTimer = 0
var DateTime timeOfMotion = null

/*
rule "Set RGB value TreeLight"
when
        Item TreeLight changed
then
        val hsbValue = TreeLight.state as HSBType

        val brightness = hsbValue.brightness.intValue
        val redValue   = ((((hsbValue.red.intValue * 255) / 100) * brightness) / 100).toString
        val greenValue = ((((hsbValue.green.intValue * 255) / 100) * brightness) / 100).toString
        val blueValue  = ((((hsbValue.blue.intValue *255) / 100) * brightness) / 100).toString

        //val color = "0|" + redValue + "|" + greenValue + "|" + blueValue + "|0"
         val color = redValue + "," + greenValue + "," + blueValue  

        sendCommand( TreeLightColor, color )
end
* 
*/


rule "Set RGB value TreeLight TEST"
when
        Item TreeLight changed
then
        val hsbValue = TreeLight.state as HSBType
		
		
        val brightness = hsbValue.brightness.intValue
        val redValue   = ((((hsbValue.red.intValue * 255) / 100) * brightness) / 100)
        val greenValue = ((((hsbValue.green.intValue * 255) / 100) * brightness) / 100)
        val blueValue  = ((((hsbValue.blue.intValue *255) / 100) * brightness) / 100)
        
        var r = new Integer(redValue)
        
        //val color = "0|" + redValue + "|" + greenValue + "|" + blueValue + "|0"
        //val hex = Integer::toHexString( redValue ) + Integer::toHexString( greenValue ) + Integer::toHexString( blueValue )//HEX String deluje!!!
         val color = redValue + "," + greenValue + "," + blueValue
         //val color = hsbValue.toString  

        sendCommand( TreeLightColor, color )
end

/*
rule "Set motion since timer to null"
when 
	Item Motion changed from CLOSED to OPEN
then
	MotionTimer = 0
	postUpdate(MotionSince, "<5min")
	timeOfMotion = new DateTime()	
	
end
* 
*/

rule "Cron job every minute"
when 
    Time cron "0 0/1 * * * ?"   // every minute
then

	//door.changedSince(now.minusSeconds(1), "mysql")
	
    //logInfo("rules", "Person maximum: " + Motion.maximumSince(now.minusMinutes(60), "mysql").timestamp)
	//logInfo("rules", "Person minimum: " + Motion.minimumSince(now.minusMinutes(60), "mysql").timestamp)
	//logInfo("rules", "Sprememba: " + Motion.changedSince(now.minusSeconds(MotionTimer), "mysql"))
	//logInfo("rules", "Sprememba date: " + new DateTime())		
	
	var Calendar cal = Calendar::getInstance()
	cal.setTime(Motion.lastUpdate("mysql"))
	
	//poskusimo dobiti razliko vrednosti med časom!:)
	var DateTimeType time = new DateTimeType()
	
	var int m = Minutes::minutesBetween(new DateTime(cal.timeInMillis), now).getMinutes()
	
	//var DateTimeType diff = new DateTimeType(time) - new DateTimeType(cal)
	
	var String s = String::format("%1$tH:%1$tM / %1$te.%1$tm.%1$tY", cal)
	
	MotionSince.postUpdate(s + " (" + m + "min)ago")
	
	//logInfo("rules", "Zadnja sprememba v bazi:", m)
	
	
	/*
	
	if(Motion.changedSince(now.minusSeconds(MotionTimer), "mysql") == true)
		MotionTimer = 0
	
	
	if(MotionTimer < 300)
		postUpdate(MotionSince, "<5min")
	if(MotionTimer >= 300 && MotionTimer < 600)
		postUpdate(MotionSince, "<10min")
	if(MotionTimer >= 600 && MotionTimer < 1200)
		postUpdate(MotionSince, ">10min & <20min")
	if(MotionTimer >= 1200 && MotionTimer < 1800)
		postUpdate(MotionSince, ">20min & <30min")
	if(MotionTimer >= 1800 && MotionTimer < 2400)
		postUpdate(MotionSince, ">30min & <40min")
	if(MotionTimer >= 2400 && MotionTimer < 3000)
		postUpdate(MotionSince, ">40min & <50min")
	if(MotionTimer >= 3000 && MotionTimer < 3600)
		postUpdate(MotionSince, ">50min & <1h")
	MotionTimer = MotionTimer + 60
	* 
	*/
end



/*
rule "Turn On second LED"
when
		Item mqttsw1 changed from OFF to ON
then
		sendCommand(mqttsw2, ON)
end
* 
* 
*/
/*
rule "Turn Off second LED"
when
		Item mqttsw1 changed from ON to OFF
then
		sendCommand(mqttsw2, OFF)
end
*/
/*
rule "test led diode"
when 
		Item mqttsw1 received update
then
	var vrednost = mqttsw1.state
		sendCommand(mqttsw2, vrednost.toString)
		sendCommand(mqttsw2, ON)
end
*/
/*
rule "Turn on"
when
		Item mqttsw1s changed
then
		var vrednost = mqttsw1s.state.toString
			if(vrednost == "off")
				sendCommand(mqttsw1, OFF)
			if(vrednost == "on")
				sendCommand(mqttsw1, ON)
end
rule "test update"
when
	Item mqttsw1s received update
then
		var String[] buffer = mqttsw1s.state.toString.split("|")
		var value = buffer.get(1)
			sendCommand(mqttsw2s, value)
			sendCommand(mqttsw1, "OFF")
end

*/

/*
rule "prizgi diodo 2, ko se prizge 3 in pošlji email"
when
	Item mqttsw3s received update
then
	var String[] buffer = mqttsw3s.state.toString.split("|")
	val value = buffer.get(3)//upošteva 2 znak pri stringu 0|0|0
	sendCommand(mqttsw4s, value)
	if(value == "1")
	{
		sendCommand(mqttsw3, "ON")
		sendMail("peter_sprajc@yahoo.com", "Mail from OpenHab" , "V vašem stanovanju je bila prižgana luč!:)")
		sendMail("tomaz.verbic@gmail.com", "Mail from OpenHab" , "V vašem stanovanju je bila prižgana luč!:)")
	}
	if(value == "0")
	{
		sendCommand(mqttsw3, "OFF")
	}
end
* 
*/

rule " Send email for flower!"
when 
	Item FlowerSenzor received update
then
		var Number Stevilo = FlowerSenzor.state as org.openhab.core.library.types.DecimalType
		//val Stevilo =  Integer.valueOf(StrStevilo); 
		if(Stevilo >= 250)
		{
			sendMail("tomaz.verbic@gmail.com", "Mail from OpenHab" , "Please feed the flower!:)")
			sendMail("peter_sprajc@yahoo.com", "Mail from OpenHab" , "Please feed the flower!:)")
			sendMail("gmarzek@gmail.com", "Mail from OpenHab" , "Please feed the flower!:)")
		}
end

rule "Spremljanje gibanja" // ideja: nastavimo timer ki se sproži in ko je motion na CLOSED se sproži dejanje, ki 
when
	Item Motion changed
then
	if(Motion.state.toString == "OPEN")
	{
		//if(timerDelay != null)
			//timerDelay.cancel()
		//timerDelay = createTimer(now.plusSeconds(30)) [|
        //publish("mymosquitto", "mygateway1-in/4/1/1/0/2", "1")
        publish("mymosquitto", "mygateway1-in/2/1/1/0/2", "1")
    //]
		
		
		
		/*	
		sendMail("tomaz.verbic@gmail.com", "Mail from OpenHab" , "Gibanje v stanovanju!:) <br> Pokličte polcijo porka motorka!")
		sendMail("peter_sprajc@yahoo.com", "Mail from OpenHab" , "Gibanje v stanovanju!:) <br> Pokličte polcijo porka motorka!")
		sendMail("gmarzek@gmail.com", "Mail from OpenHab" , "Gibanje v stanovanju!:) <br> Pokličte polcijo porka motorka!")
		* 
		*/
		
	}
	if(Motion.state.toString == "CLOSED")
	{
		/*	
		sendMail("tomaz.verbic@gmail.com", "Mail from OpenHab" , "Gibanje v stanovanju!:) <br> Pokličte polcijo porka motorka!")
		sendMail("peter_sprajc@yahoo.com", "Mail from OpenHab" , "Gibanje v stanovanju!:) <br> Pokličte polcijo porka motorka!")
		sendMail("gmarzek@gmail.com", "Mail from OpenHab" , "Gibanje v stanovanju!:) <br> Pokličte polcijo porka motorka!")
		* 
		*/
		if(timerDelay != null)
			timerDelay.cancel()
		timerDelay = createTimer(now.plusSeconds(timeOut)) [|
        //publish("mymosquitto", "mygateway1-in/4/1/1/0/2", "0")
        publish("mymosquitto", "mygateway1-in/2/1/1/0/2

