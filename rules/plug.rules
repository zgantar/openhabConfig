
val Functions$Function2<NumberItem, NumberItem, Boolean> deductMinutes = [ 
	NumberItem HoursStartSetter,
	NumberItem MinutesStartSetter|
	
	logInfo("plug", "Potrebno je premakniti uro nazaj")
	var Number minutes = MinutesStartSetter.state as Number
	var Number hours = HoursStartSetter.state as Number
	logInfo("plug", "Trenutno je ura nastavljena na - " + hours + ":" + minutes)
	if (minutes == 0) {
		logInfo("plug", "Ker so minute na 0 moram prestaviti uro")
		hours = hours-1
		minutes = 55
		HoursStartSetter.postUpdate(hours)
		MinutesStartSetter.postUpdate(minutes)
	} else {
		minutes = minutes - 5
		MinutesStartSetter.postUpdate(minutes)
	}
	logInfo("plug", "Nastavil sem novo uro prižiga - " + hours + ":" + minutes)
	return true
]

val Functions$Function2<NumberItem, NumberItem, Boolean> addMinutes = [ 
	NumberItem HoursStartSetter,
	NumberItem MinutesStartSetter|
	
	logInfo("plug", "Potrebno je premakniti uro naprej")
	var Number minutes = MinutesStartSetter.state as Number
	var Number hours = HoursStartSetter.state as Number
	logInfo("plug", "Trenutno je ura nastavljena na - " + hours + ":" + minutes)
	if (minutes == 55) {
		logInfo("plug", "Ker so minute na 55 moram prestaviti uro")
		hours = hours + 1
		minutes = 0
		HoursStartSetter.postUpdate(hours)
		MinutesStartSetter.postUpdate(minutes)
	} else {
		minutes = minutes + 5
		MinutesStartSetter.postUpdate(minutes)
	}
	logInfo("plug", "Nastavil sem novo uro prižiga - " + hours + ":" + minutes)
	return true
]



rule "Check heater plug"
when
	Time cron "0 */5 * * * ?"
then
	logInfo("plug", "#####################Checking if we need to change heater state#####################")
	TimeSetter.members.forEach[ timeSetter |
		logInfo("plug", "Pregledujem setter: ", timeSetter.toString)
		//check if it is for water hater
		if (!timeSetter.groupNames.filter(group|group.equalsIgnoreCase("Boiler")).empty) {
			//check to see if it is a starter 
			if (timeSetter.name.contains("Start")) {
				var Number startHour = 0
				var Number startMinutes = 0
				//check if it is for hours
				if (timeSetter.name.contains("Hours")) {
					startHour = timeSetter.state as Number
				//check if it is for minutes
				} else {
					startMinutes = timeSetter.state as Number
				}
				logInfo("plug", "Start time is set to - " + startHour + ":" + startMinutes)
				if (now.getHourOfDay == startHour && now.getMinuteOfHour == startMinutes) {
					logInfo("plug", "Prišla je ura za vžig bojlerja")
					if (Away.state == OFF) {
						logInfo("plug", "Nismo na dopustu tako da prižigam bojler")
						if (PlugHeatSwitch.state == OFF) PlugHeatSwitch.sendCommand(ON)
					} else {
						logInfo("plug", "Smo na dopustu, tako da preverjam ali je že minilo več kot 5 dni od zadnjega prižiga")
						if (AwayOn.state != ON || AwayOn.state != OFF) {
							AwayOn.sendCommand(OFF)
						}
						val lastUpdateTime = PlugHeatSwitch.lastUpdate.millis		
						val timeDifference = now.millis - lastUpdateTime
						if (timeDifference > 432000000) {
							logInfo("plug", "Je že minilo več kot 5 dni od zadnjega prižiga zato prižigam")
							if (PlugHeatSwitch.state == OFF) PlugHeatSwitch.sendCommand(ON)
						} else if (AwayOn.state == ON && timeDifference > 7200000) {
							logInfo("plug", "Proti legionarsko ogrevanje je končano")
							PlugHeatSwitch.sendCommand(OFF)
							AwayOn.sendCommand(OFF)
						}
					}
				}
			//check to see if it is a stoper 
			} else if (timeSetter.name.contains("Stop")) {
				var Number stopHour = 0
				var Number stopMinutes = 0
				//check if it is for hours
				if (timeSetter.name.contains("Hours")) {
					stopHour = timeSetter.state as Number
				//check if it is for minutes
				} else {
					stopMinutes = timeSetter.state as Number
				}
				logInfo("plug", "Stop time is set to - " + stopHour + ":" + stopMinutes)
				if (now.getHourOfDay == stopHour && now.getMinuteOfHour == stopMinutes) {
					logInfo("plug", "Prišla je ura za ugašanje bojlerja, ugašam, če je prižgan")
					if (PlugHeatSwitch.state == ON) {
						if (PlugHeatPower.state > 0) {
							logInfo("plug", "Ker bojler še vedno ogreva vodo, premaknem uro prižiga 5 min nazaj")
							deductMinutes.apply(HoursStartSetter, MinutesStartSetter)
						} else {
							logInfo("plug", "Ker bojler ne ogreva več vode, premaknem uro prižiga 5 min naprej")
							addMinutes.apply(HoursStartSetter, MinutesStartSetter)
						}
						PlugHeatSwitch.sendCommand(OFF)
					}
				}
			}
		}
 	]
	logInfo("plug", "#####################End of heater state check#####################")
end

rule "Check vacuum plug"
when
	Item Sesalec_Battery changed
then
	logDebug("plug", "#####################Checking if we need to change vacuum plug state#####################")
	logDebug("plug", "Sesalec je napolnjen " + Sesalec_Battery.state)
	// if (Sesalec_Stanje.state == 'Charging' || Sesalec_Stanje.state == 'Idle' || Sesalec_Stanje.state == 'Sleeping') {
	if (Sesalec_Stanje.state == 'Cleaning'){
		logDebug("plug", "Sesalec trenutno sesa zato preverimo stanje vtičnice")
		if (PlugVacuSwitch.state == OFF) {
				logDebug("plug", "Vtičnica je izklopljena zato jo vklopimo, da bo sesalec našel nazaj domov")
				PlugVacuSwitch.sendCommand(ON)
		}
	} else if (Sesalec_Battery.state > 85) {
		if (PlugVacuSwitch.state == ON) {
			logDebug("plug", "Sesalec je napolnjen prek 85% zato ugašam vtičnico")
			PlugVacuSwitch.sendCommand(OFF)
		}
	} else if (Sesalec_Battery.state < 20) {
		if (PlugVacuSwitch.state == OFF) {
			logDebug("plug", "Sesalec je napolnjen pod 20% zato vklapljam vtičnico")
			PlugVacuSwitch.sendCommand(ON)
		}
	} else {
		if (PlugVacuSwitch.state == ON && Sesalec_Stanje.state == 'Charging') {
			logDebug("plug", "Sesalec se polni in je napolnjen med 20% in 85% zato pustimo vtičnico kot je")
		} else {
			logDebug("plug", "Sesalec se ne polni vendar je napolnjen med 20% in 85% zato pustimo vtičnico kot je")
		}
	}
	// } else
	logDebug("plug", "#####################End of vacuum plug state check#####################")
end