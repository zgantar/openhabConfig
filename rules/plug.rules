rule "Check heater plug"
when
	Time cron "0 */5 * * * ?"
then
	logDebug("plug", "#####################Checking if we need to change heater state#####################")
	val Number startHour = HoursStartSetter.state as Number
	val Number startMinutes = MinutesStartSetter.state as Number
	logDebug("plug", "Start time is set to - " + startHour + ":" + startMinutes)
	val Number stopHour = HoursStopSetter.state as Number
	val Number stopMinutes = MinutesStopSetter.state as Number
	logDebug("plug", "Stop time is set to - " + stopHour + ":" + stopMinutes)
	//check start first
	if (now.getHourOfDay == startHour && now.getMinuteOfHour == startMinutes) {
		logDebug("plug", "Ura je primerna za vžig bojlerja")
		if (Away.state == OFF) {
			logDebug("plug", "Nismo na dopustu tako da prižigam bojler")
			if (PlugHeatSwitch.state == OFF) PlugHeatSwitch.sendCommand(ON)
		} else {
			logDebug("plug", "Smo na dopustu, tako da preverjam ali je že minilo več kot 5 dni od zadnjega prižiga")
			if (AwayOn.state != ON || AwayOn.state != OFF) {
				AwayOn.sendCommand(OFF)
			}
			val lastUpdateTime = PlugHeatSwitch.lastUpdate.millis		
			val timeDifference = now.millis - lastUpdateTime
			if (timeDifference > 432000000) {
				logDebug("plug", "Je že minilo več kot 5 dni od zadnjega prižiga zato prižigam")
				if (PlugHeatSwitch.state == OFF) PlugHeatSwitch.sendCommand(ON)
			} else if (AwayOn.state == ON && timeDifference > 7200000) {
				logDebug("plug", "Proti legionarsko ogrevanje je končano")
				PlugHeatSwitch.sendCommand(OFF)
				AwayOn.sendCommand(OFF)
			}
		}
	} else if (now.getHourOfDay == stopHour && now.getMinuteOfHour == stopMinutes) {
		logDebug("plug", "Ura ni primerna za vžig bojlerja, ugašam, če je prižgan")
		if (PlugHeatSwitch.state == ON) PlugHeatSwitch.sendCommand(OFF)
	}
	logDebug("plug", "#####################End of heater state check#####################")
end

rule "Check vacuum plug"
when
	Item Sesalec_Battery changed
then
	logDebug("plug", "#####################Checking if we need to change vacuum plug state#####################")
	logDebug("plug", "Sesalec je napolnjen " + Sesalec_Battery.state)
	// if (Sesalec_Stanje.state == 'Charging' || Sesalec_Stanje.state == 'Idle' || Sesalec_Stanje.state == 'Sleeping') {
	if (Sesalec_Stanje.state == 'Cleaning'){
		logDebug("plug", "Sesalec trenutno sesa zato preverimo stanje vtičnice")
		if (PlugVacuSwitch.state == OFF) {
				logDebug("plug", "Vtičnica je izklopljena zato jo vklopimo, da bo sesalec našel nazaj domov")
				PlugVacuSwitch.sendCommand(ON)
		}
	} else if (Sesalec_Battery.state > 85) {
		if (PlugVacuSwitch.state == ON) {
			logDebug("plug", "Sesalec je napolnjen prek 85% zato ugašam vtičnico")
			PlugVacuSwitch.sendCommand(OFF)
		}
	} else if (Sesalec_Battery.state < 20) {
		if (PlugVacuSwitch.state == OFF) {
			logDebug("plug", "Sesalec je napolnjen pod 20% zato vklapljam vtičnico")
			PlugVacuSwitch.sendCommand(ON)
		}
	} else {
		if (PlugVacuSwitch.state == ON && Sesalec_Stanje.state == 'Charging') {
			logDebug("plug", "Sesalec se polni in je napolnjen med 20% in 85% zato pustimo vtičnico kot je")
		} else {
			logDebug("plug", "Sesalec se ne polni vendar je napolnjen med 20% in 85% zato pustimo vtičnico kot je")
		}
	}
	// } else
	logDebug("plug", "#####################End of vacuum plug state check#####################")
end