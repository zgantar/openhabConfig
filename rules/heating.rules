import org.joda.time.*
import org.openhab.model.script.actions.*
import org.apache.commons.lang.StringUtils.*
import org.eclipse.xtext.xbase.lib.*


var boolean startHeating1
var boolean startHeating2

val Functions$Function1 filterTempValues = [ 
	boolean krneki|
	
	logInfo("heating", "Preverjam ali je potrebno filtrirati vrednosti")
	Temp.members.forEach[loopItem |
		logInfo("heating", "Preverjam za sobo - " + loopItem.toString)
		if (loopItem.groupNames.filter(group|group.equalsIgnoreCase("TempCal")).empty) {
			var Number temp = 18
			if (loopItem.state != NULL) temp = loopItem.state as Number
			if (temp <= 10 || temp >= 35) {
				logInfo("heating", "3.1 gledamo kakšna je vrednost odvoda zadnjih 15 min: " + (loopItem.deltaSince(now.minusMinutes(15)) as Number))
				logInfo("heating", "3.1 gledamo kakšna je vrednost evolution v zadnjih 15 min: " + (loopItem.evolutionRate(now.minusMinutes(16)) as Number))
				val historicState = loopItem.previousState
				loopItem.postUpdate(historicState.state)
				
				logInfo("heating", "Filtracija izvedena, nova vrednost - " + loopItem.toString)
			}
			loopItem.persist
		}
	]
	return true
]

val Functions$Function1 addMissingValues = [ 
	boolean krneki|
	
	logInfo("heating", "Preračunavam manjkajoče vrednosti")
//	TempDnevna.postUpdate(((TempKuhinja.state as DecimalType)*0.4) + ((TempKabinet.state as DecimalType)*0.6))
//	TempDnevna.persist
	logInfo("heating", "Dnevna - " + TempDnevna.toString)
	TempHodnikS.postUpdate(((TempKuhinja.state as DecimalType)*0.3) + ((TempKabinet.state as DecimalType)*0.4) + ((TempKopalnicaS.state as DecimalType)*0.3))
	TempHodnikS.persist
	logInfo("heating", "Hodnik spodaj - " + TempHodnikS.toString)
//	TempHodnikZ.postUpdate(((TempAljaz.state as DecimalType)*0.4) + ((TempJulija.state as DecimalType)*0.4) + ((TempKopalnicaZ.state as DecimalType)*0.2))
//	TempHodnikZ.persist
//	logInfo("heating", "Hodnik zgoraj - " + TempHodnikZ.toString)
	return true
]

val Functions$Function1 showFhsValues = [ 
	boolean krneki|

	logInfo("heating", "################Klic Log for FHS items################")
	Fhs.members.forEach[fhsItem|
		logInfo("heating", "Ventil je - " + fhsItem.toString)
	]
	logInfo("heating", "################Konec Log for FHS items################")		
	return true
]

	
rule "Set all necessary variables for heating"
when
	System started
then
	sendCommand(Heating, OFF)
	sendCommand(Override, OFF)
	sendCommand(LowElectricity, OFF)
	sendCommand(Holidays, OFF)
	sendCommand(Away, OFF)
	Log.members.forEach[item | 
		logInfo("heating", "Zapiram ventil " + item.toString)
		item.sendCommand(OFF)
	]
	Man.members.forEach[item | 
		logInfo("heating", "Zapiram ventil " + item.toString)
		item.sendCommand(OFF)
	]
	Fhs.members.forEach[item | 
		logInfo("heating", "Zapiram ventil " + item.toString)
		item.sendCommand(OFF)
	]
	//setting up desired values for rooms
	Set.members.forEach[ item |
		if (item.state == NULL) item.postUpdate(20.0)
	]
	Dif.members.forEach[ item |
		if (item.state == NULL) item.postUpdate(0)
	]
	
	logInfo("heating", "1 Nastavljene začetne vrednosti!")
end

//checking to see if any of the rooms needs heating
rule "Checking if one of the rooms needs heating"
when
	Time cron "0 */5 * * * ?" or
	Item Set changed 
then
	logInfo("heating", "##################Preverjamo temperature#################")
	startHeating1 = false
	filterTempValues.apply(startHeating1)
	addMissingValues.apply(startHeating1)
		Temp.members.forEach[ tempItem |
		logInfo("heating", "In the loop z - " + tempItem.toString)
//		if (Override.state == OFF) {
			logInfo("heating", "After if")
			val name = tempItem.name.substring(4)
			logInfo("heating", "Preverjam sobo - " + name)
			var setItem = Set.members.filter(setter | setter.name.containsIgnoreCase(name)).head
			logInfo("heating", "Dobil setter - " + setItem.toString)
			val difItem = Dif.members.filter(setter | setter.name.containsIgnoreCase(name)).head
			logInfo("heating", "Dobil differ - " + difItem.toString)
			var Number currentTemp = 0
			if (tempItem.state != NULL) currentTemp = tempItem.state as Number 
			var Number mejnaTemp = 0
			if (setItem.state != NULL) mejnaTemp = setItem.state as Number
			logInfo("heating", "2 Preverjam ali je potrebno ogreti - " + setItem.toString)
			var logItem = Log.members.filter( doer | doer.name.containsIgnoreCase(name)).head
			logInfo("heating", "3 Našli smo ventil - " + logItem.toString)
			logInfo("heating", "3.1 gledamo kakšna je nastavljena vrednost za to sobo: " + mejnaTemp)
			if (Away.state == ON && LowElectricity.state == OFF) {
				mejnaTemp = mejnaTemp - 3
				logInfo("heating", "3.2 Ker ni nobenega doma in ni poceni elektrika je mejna temperatura zmanjšana za 3 - " + mejnaTemp)
			} else if (Away.state == ON && LowElectricity.state == ON) {
				mejnaTemp = mejnaTemp - 2
				logInfo("heating", "3.2 Ker ni nobenega doma in je poceni elektrika je mejna temperatura zmanjšana za 2 - " + mejnaTemp)
			} else if (now.getHourOfDay > 6 && now.getHourOfDay < 14 && now.getDayOfWeek < 6 && Holidays.state == OFF) {
				mejnaTemp = mejnaTemp - 0.2
				logInfo("heating", "3.2 Ker je zjutraj med tednom in nismo na dopustu, se mejna temperatura spusti za 0.2 stopinje - " + mejnaTemp)
			} else if (FhsHeater.state == ON && LowElectricity.state == ON) {
				mejnaTemp = mejnaTemp + 0.3
				logInfo("heating", "3.2 Ker se že ogreva in je nizka cena elektrike, se mejna temperatura dvigne za 0.3 stopinje - " + mejnaTemp)
			} else if (FhsHeater.state == ON) {
				mejnaTemp = mejnaTemp + 0.1
				logInfo("heating", "3.2 Ker se že ogreva, se mejna temperatura dvigne za 0.1 stopinje - " + mejnaTemp)
			} 
			val difTemp = currentTemp - mejnaTemp
			difItem.postUpdate(difTemp)
			difItem.persist
			if (Override.state == OFF) {
				logInfo("heating", "3.3 Temperatura sobe je - " + currentTemp)
				logInfo("heating", "3.4 Temperatura sobe bi morala biti - " + mejnaTemp)
				logInfo("heating", "3.5 If pa pride - " + (difTemp <= 0))
				if (difTemp <= 0) {
					startHeating1 = true
					logInfo("heating", "4.1 temperatura je prenizka, stikalo " + logItem.toString)
					if (logItem.state == OFF) {
						logItem.sendCommand(ON)
						logInfo("heating", "4.1.1 Izdan ukaz za ogrevanje sobe - " + name)
					}
				} else {
					logInfo("heating", "4.2 temperatura je previsoka, stikalo " + logItem.toString)
					if (logItem.state == ON) {
						logItem.sendCommand(OFF)
						logInfo("heating", "4.2.1 Izdan ukaz za konec ogrevanja sobe - " + name)
					}
					logInfo("heating", "Preverjamo ali je temperatura toliko previsoka, da moramo spustiti žaluzije")
//					if ((difTemp > 3) && (Integer.parseInt((OutSolarRad.previousState.state as StringType).toString).intValue > 0)) {
//						val roomName = tempItem.name.substring(4, tempItem.name.length - 1)
//						logInfo("heating", "Temperatura je previsoka, spuščam žaluzije " + name)
//						BlindLog.members.forEach[roomBlind|
//							if (roomBlind.name.containsIgnoreCase(name)) {
//								logInfo("heating", "Našel stikalo " + roomBlind.toString)
//								if (roomBlind.name.containsIgnoreCase("Do")) {
//									val boolean lowAct = !roomBlind.groupNames.filter(group|group.equalsIgnoreCase("BlindRev")).empty
//									roomBlind.sendCommand(ON)
//									logInfo("heating", "Poslal ukaz za spust žaluzij " + roomBlind.toString)
//								} 
//							}
//						]
//					}
				}
			} else {
				logInfo("heating", "Ročni override zato ignoriral preračune!")
			}
		]
//	showFhsValues.apply(startHeating1)
	if (startHeating1) {
		logInfo("heating", "5.1 Poslal ukaz za ogrevanje")
		sendCommand(LogOgrevanje, ON)
	} else if (!startHeating1 && FhsHeater.state == ON) {
		sendCommand(LogOgrevanje, OFF)
		logInfo("heating", "5.2 Poslal ukaz za konec ogrevanja")
	} if (Override.state == ON) {
		sendCommand(ManOgrevanje, ON);
	}
	logInfo("heating", "**********************Konec********************")
end

rule "Override is turned on"
when
	Item Override changed to ON
then
	logInfo("heating", "Ročno proženo upravljnanje z ogrevanjem - " + Override.toString)
	Man.members.forEach[manItem|
		logInfo("heating", "Nastavljamo ročno stikalo - " + manItem.toString)
		val name = manItem.name.substring(3)
		val boolean noVent = !manItem.groupNames.filter(group|group.equalsIgnoreCase("ManRev")).empty
		val valve = Fhs.members.filter(fhsTmpItem | fhsTmpItem.name.containsIgnoreCase(name)).head
		logInfo("heating", "Na vrednost ventila - " + valve.toString)
		if (valve.state == ON) { 
			if (!noVent) manItem.sendCommand(ON) else manItem.sendCommand(OFF) 
		} else {
			manItem.sendCommand(OFF)
		} 
		logInfo("heating", "In zaključimo - " + manItem.toString)
	]
end

rule "Override is turned off"
when
	Item Override changed to OFF
then
	logInfo("heating", "Ročno izklopljeno upravljnanje z ogrevanjem - " + Override.toString)
	sendCommand(ManOgrevanje, OFF)
end


rule "heating of a room was requested by logic"
when
	Item LogOgrevanje received command or
	Item ManOgrevanje received command
then
	logInfo("heating", "*************************Pregled in vklop zahtevanih ventilov**************************")
	startHeating2 = false
	logInfo("heating", "Poglejmo ali je bilo ročno proženo ali ne - " + Override.toString)
	if (Override.state == OFF) {
		logInfo("heating", "Ogrevanje ni proženo ročno!")
		Log.members.forEach[ logItem |
			logInfo("heating", "Preverjamo za logično stikalo " + logItem.toString)
			val boolean noVent = !logItem.groupNames.filter(group|group.equalsIgnoreCase("LogRev")).empty
			val name = logItem.name.substring(3)
			val valve = Fhs.members.filter( fhsTmpItem | fhsTmpItem.name.containsIgnoreCase(name)).head
			if (valve != null) {
				logInfo("heating", "Našel ventil za logično stikalo " + valve.toString)
				if (logItem.state == ON) {
					startHeating2 = true
					if (!noVent) {
						if (valve.state == OFF) {
							valve.sendCommand(ON)
							logInfo("heating", "8.1 Našel normalen ventil za ročno odpret - " + valve.toString)
						}
					} else {
						if (valve.state == ON) {
							valve.sendCommand(OFF)
							logInfo("heating", "8.2 Našel NO ventil za ročno odpret - " + valve.toString)
						}
					}
				} else {
					if (!noVent) {
						if (valve.state == ON) {
							valve.sendCommand(OFF)
							logInfo("heating", "8.3 Našel normalen ventil za ročno zapret - " + valve.toString)
						}
					} else {
						if (valve.state == OFF && LogOgrevanje.state == ON) {
							valve.sendCommand(ON)
							logInfo("heating", "8.4 Našel NO ventil za ročno zapret - " + valve.toString)
						}
					}
				}
			} else {
				logInfo("heating", "Nisem našel ventila za ročno stikalo - " + name)
			}
		]
	} else {
		logInfo("heating", "Ogrevanje je proženo ročno!")
//		val manItem = Man.members.sortBy[lastUpdate].last
		Man.members.forEach[ manItem |
			logInfo("heating", "Preverjamo za ročno stikalo " + manItem.toString)
			val boolean noVent = !manItem.groupNames.filter(group|group.equalsIgnoreCase("ManRev")).empty
			logInfo("heating", "Ali je stikalo NO " + noVent)
			val name = manItem.name.substring(3)
			val valve = Fhs.members.filter( fhsTmpItem | fhsTmpItem.name.containsIgnoreCase(name)).head
			logInfo("heating", "Našel ventil za ročno stikalo " + valve.toString)
			if (valve != null) {
				val difItem = Dif.members.filter(setter | setter.name.containsIgnoreCase(name)).head
				logInfo("heating", "Dobil differ - " + difItem.toString)
				val Number difTemp = difItem.state as Number
				if (manItem.state == ON && difTemp < 0) {
					if (difTemp < 0) {
						logInfo("heating", "Ogrevam samo izbrano sobo, ker je ročni ukaz in nižja temperatura od nastavljene - " + difTemp)
						startHeating2 = true
						if (!noVent) {
							if (valve.state == OFF) {
								valve.sendCommand(ON)
								logInfo("heating", "8.1 Našel normalen ventil za ročno odpret - " + valve.toString)
							}
						} else {
							if (valve.state == ON) {
								valve.sendCommand(OFF)
								logInfo("heating", "8.2 Našel NO ventil za ročno odpret - " + valve.toString)
							}
						}
					} else {
						logInfo("heating", "Ne ogrevam izbrane sobe, ker je temperatura višja od nastavljene - " + difTemp)
					}
				} else if (Heating.state == ON || startHeating2){
					logInfo("heating", "Ne ogrevam izbrane sobe, ker je temperatura višja od nastavljene ali ni ročnega ukaza - " + difTemp)
					if (!noVent) {
						if (valve.state == ON) {
							valve.sendCommand(OFF)
							logInfo("heating", "8.3 Našel normalen ventil za ročno zapret - " + valve.toString)
						}
					} else {
						if (valve.state == OFF && ManOgrevanje.state == ON) {
							valve.sendCommand(ON)
							logInfo("heating", "8.4 Našel NO ventil za ročno zapret - " + valve.toString)
						}
					}
				}
			} else {
				logInfo("heating", "Nisem našel ventila za ročno stikalo - " + name)
			}
		]
	}
//	showFhsValues.apply(startHeating1)
	if (startHeating2) {
		logInfo("heating", "Vklopimo ogrevanje.")
		sendCommand(Heating, ON)
	} else {
		logInfo("heating", "Ker je ogrevanje izklopljeno ne preverjamo posameznih ventilov.")
		sendCommand(Heating, OFF)
	}
	logInfo("heating", "*************************Konec pregleda in vklopa zahtevanih ventilov**************************")
end

rule "Heating when ordered"
when
	Item Heating received command
then
	logInfo("heating", "Klic Heating when ordered - " + Heating.toString)
	if (Heating.state == ON) {
		sendCommand(FhsHeater, ON)
		logInfo("heating", "Ogrevanje se je vklopilo" + FhsHeater.toString)
	} else {
		sendCommand(FhsHeater, OFF)
		logInfo("heating", "Ogrevanje se je izklopilo, izklapljam še morebitne vklopljene ventile")
		//Turn off all the switches since we are not heating anymore
		Fhs.members.filter(item | item.state == ON).forEach[ tmpItem | 
			tmpItem.sendCommand(OFF)
			logInfo("heating", "Ugasnil ventil - " + tmpItem.toString)
		]
	}
//	showFhsValues.apply(true)
end