import org.joda.time.*
import org.openhab.model.script.actions.*
import org.apache.commons.lang.StringUtils.*
import org.eclipse.xtext.xbase.lib.*
import java.util.ArrayList


var boolean startHeating1
var boolean startHeating2
var boolean stopHeating

var ArrayList<SwitchItem> itemsOn = null
var ArrayList<SwitchItem> itemsOff = null

val Functions$Function1<Boolean, Boolean> filterTempValues = [ 
	boolean krneki|
	
	logDebug("heating", "Preverjam ali je potrebno filtrirati vrednosti")
	Temp.members.forEach[loopItem |
		logDebug("heating", "Preverjam za sobo - " + loopItem.toString)
		var Number temp = 18
		if (loopItem.state != NULL) temp = loopItem.state as Number
		if (temp <= 10 || temp >= 35) {
			temp = loopItem.previousState.state as Number
			logDebug("heating", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Filtracija izvedena, nova vrednost za je {} !!!!!!!!!!!!!!!!!!!!!!!!!!!", loopItem.toString)
		}
		logDebug("heating", "Saving the value {} to the item {}", temp, loopItem.toString)
		loopItem.postUpdate(temp)
		loopItem.persist
	]
	return true
]
//checkTrend is used to calculate the trend for the temperature for a given:
//	*	NumberItem	-	for which the trend needs to be calculated
//	*	Number		-	time in minutes for when the trend needs to be calculated
//return value:
//	*	Number		-	the calculated temperature for the given item and time
val Functions$Function2<NumberItem, Number, Number> checkTrend = [ 
	NumberItem tempItem,
	Number time|
	
	logDebug("heating", "Preverjam temperaturni trend za {}", tempItem.toString)
	val Number temp = tempItem.state as Number
	val Number delta = tempItem.deltaSince(now.minusMinutes(45)) as Number
	logDebug("heating", "Delta je {}", delta)
	val Number deviation = delta/45
	logInfo("heating", "Deviation je {}", deviation)
	val Number prediction = deviation * time + temp
	logDebug("heating", "Prediction je {}", prediction)
	return prediction
]


rule "Set all necessary variables for heating"
when
	System started
then
	sendCommand(Heating, OFF)
	sendCommand(LogOgrevanje, OFF)
	sendCommand(ManOgrevanje, OFF)
	Log.sendCommand(OFF)
	Man.sendCommand(OFF)
	Fhs.sendCommand(OFF)
	//setting up desired values for rooms
	// Set.members.forEach[ item |
	// 	if (item.state == NULL) item.postUpdate(20.0)
	// ]
	Dif.members.forEach[ item |
		if (item.state == NULL) item.postUpdate(0)
	]
	logDebug("heating", "Nastavljene začetne vrednosti!")
end

//checking to see if any of the rooms needs heating
rule "Checking if one of the rooms needs heating"
when
	Time cron "0 */5 * * * ?" or
	Item Set changed 
then
	logInfo("heating", "##################Preverjamo temperature#################")
	startHeating1 = false
	stopHeating = false
	filterTempValues.apply(startHeating1)
	Temp.members.forEach[ tempItem |
		val name = tempItem.name.substring(4)
		logInfo("heating", "###################Preverjam sobo {}", name)
		val setItem = Set.members.filter(setter | setter.name.containsIgnoreCase(name)).head
		if (setItem !== null) {
			logDebug("heating", "Dobil setter {}", setItem.toString)
			val difItem = Dif.members.filter(setter | setter.name.containsIgnoreCase(name)).head
			logDebug("heating", "Dobil differ {}", difItem.toString)
			var Number currentTemp = 0
			if (tempItem.state != NULL) currentTemp = tempItem.state as Number 
			var Number mejnaTemp = 0
			var Number calcMejnaTemp = 0
			var Number timeTillStop = 0
			if (setItem.state != NULL) mejnaTemp = setItem.state as Number
			logInfo("heating", "Nastavljena temperatura za sobo {} je {}", name, setItem.state.toString)
			val logItem = Log.members.filter( doer | doer.name.containsIgnoreCase(name)).head
			if (logItem !== null) {
				logInfo("heating", "Našel sem logični ventil {}", logItem.toString)
				var Number predTemp = 0
				if (Away.state == ON && LowElectricity.state == OFF) {
					mejnaTemp = mejnaTemp - 3
					logInfo("heating", "Ker ni nobenega doma in ni poceni elektrika je mejna temperatura zmanjšana za 3 {} ", mejnaTemp)
				} else if (Away.state == ON && LowElectricity.state == ON) {
					mejnaTemp = mejnaTemp - 2
					logInfo("heating", "Ker ni nobenega doma in je poceni elektrika je mejna temperatura zmanjšana za 2 {} ", mejnaTemp)
				} else if (LowElectricity.state == ON) {
					logInfo("heating", "Ker je nizka cena elektrike preverjam temperaturni trend")
					if (now.getHourOfDay < 6 && now.getDayOfWeek() < 6) {
						logInfo("heating", "Zgodaj zjutraj med tednom")
						timeTillStop = Minutes::minutesBetween(now, now.withHourOfDay(6).withMinuteOfHour(00)).getMinutes
						predTemp = checkTrend.apply(tempItem as NumberItem, timeTillStop)
						logInfo("heating", "Pričakovana temperatura za sobo {} čez {} minut je {}", name, timeTillStop, predTemp)
						if (timeTillStop <= 240) {
							if (predTemp < mejnaTemp) calcMejnaTemp = mejnaTemp
							else if (logItem.state == ON && predTemp < mejnaTemp + 0.3) calcMejnaTemp = mejnaTemp + 0.3
							else if (logItem.state == ON && currentTemp < mejnaTemp + 0.3) mejnaTemp = mejnaTemp + 0.3
						} else mejnaTemp = mejnaTemp - 0.5
					} else if (now.getDayOfWeek() < 6) {
						logInfo("heating", "Zvečer po 22. med tednom")
						mejnaTemp = mejnaTemp - 0.5
					//weekend
					} else if (now.getDayOfWeek() >= 6) {
						logInfo("heating", "Konec tedna")
						if (currentTemp < mejnaTemp - 0.1) mejnaTemp = mejnaTemp - 0.1
						else if (logItem.state == ON && currentTemp <= mejnaTemp + 0.1) mejnaTemp = mejnaTemp + 0.1
					} //calculating the differences to predicted temp
				//High electricity price
				} else {
					logInfo("heating", "Delovni dan")
					if (now.getHourOfDay() == 6 && now.getMinuteOfHour() == 00) mejnaTemp = mejnaTemp - 0.3
					else if (now.getHourOfDay() < 18) {
						logInfo("heating", "Pred 18. uro")
						val Number timeTill18 = Minutes::minutesBetween(now, now.withHourOfDay(18).withMinuteOfHour(00)).getMinutes
						predTemp = checkTrend.apply(tempItem as NumberItem, timeTill18)
						logInfo("heating", "Pričakovana temperatura za sobo {} čez {} minut je {}", name, timeTill18, predTemp)
						if (timeTill18 <= 120 && predTemp < mejnaTemp) calcMejnaTemp = mejnaTemp
						else if (logItem.state == ON && predTemp < mejnaTemp) calcMejnaTemp = mejnaTemp + 0.1
						else if (logItem.state == ON && currentTemp < mejnaTemp) mejnaTemp = mejnaTemp + 0.1
						else mejnaTemp = mejnaTemp - 0.3
					} else {
						mejnaTemp = mejnaTemp - 0.3
					}
				}
				//ending with thrends and looking at the hard values
				logInfo("heating", "calcMejnaTemp je {}", calcMejnaTemp)
				logInfo("heating", "mejnaTemp je {}", mejnaTemp)
				var Number difTemp = 0
				if (calcMejnaTemp == 0) {
					difTemp = currentTemp - mejnaTemp
					logInfo("heating", "Običajni dif je {}", difTemp)
				} else {
					difTemp = predTemp - calcMejnaTemp
					logInfo("heating", "Prediktivni dif je {}", difTemp)
				}
				difItem.postUpdate(difTemp)
				logInfo("heating", "Temperatura sobe je {}", currentTemp)
				logInfo("heating", "Temperatura sobe bi morala biti {}, predvidena pa {}", mejnaTemp, predTemp)
				if (Override.state == OFF) {
					if (difTemp < 0 && logItem.state == OFF) {
							startHeating1 = true
							logInfo("heating", "Temperatura je PRENIZKA, izdan ukaz za stikalo {}", logItem.toString)
							logItem.sendCommand(ON)
					} else if (difTemp > 0 && logItem.state == ON) {
							stopHeating = true
							logInfo("heating", "Temperatura je PREVISOKA, izdan ukaz za stikalo {}", logItem.toString)
							logItem.sendCommand(OFF)
					}
				} else {
					logInfo("heating", "Ročni override zato ignoriral preračune, gledam samo ročne ventile!")
				}
				if (tempItem.deltaSince(now.minusMinutes(120)) as Number == 0) {
					sendHABotNotification("Ob "+ now +" je temperatura v "+ name +" enaka kot eno uro nazaj, kar kaže na morebitno napako! PREVERI!!!!")
					logWarn("heating", "Preračunana in trenutna temperatura sta enaki kar je zelo čudno. Prožim alarm")
				}
			}
		}
		logInfo("heating", "###################Konec preverjanja sobe {}", name)
	]
	logInfo("heating", "startHeating1 je {}, LogOgrevanje je {}, Log pa je {}", startHeating1, LogOgrevanje.state, Log.state)
	logInfo("heating", "ManOgrevanje je {}, Man pa je {}", ManOgrevanje.state, Man.state)
	if (startHeating1 == true) LogOgrevanje.sendCommand(ON)
	if (stopHeating == true) LogOgrevanje.sendCommand(OFF)
	if (Override.state == ON) ManOgrevanje.sendCommand(ON)
	logInfo("heating", "**********************Konec********************")
end

rule "Override is turned on"
when
	Item Override changed to ON
then
	logInfo("heating", "************************Ročno proženo upravljnanje z ogrevanjem {}**********************", Override.toString)
	Man.members.forEach[manItem|
		logInfo("heating", "Nastavljamo ročno stikalo {}", manItem.toString)
		val name = manItem.name.substring(3)
		val boolean noVent = !manItem.groupNames.filter(group|group.equalsIgnoreCase("ManRev")).empty
		val valve = Fhs.members.filter(fhsTmpItem | fhsTmpItem.name.containsIgnoreCase(name)).head
		if (valve !== null) {
			logInfo("heating", "Na vrednost ventila {}", valve.toString)
			if (Heating.state == ON) {
				if (valve.state == ON) { 
					if (!noVent) manItem.sendCommand(ON) else manItem.sendCommand(OFF) 
				} else {
					if (!noVent) manItem.sendCommand(OFF) else manItem.sendCommand(ON)
				}
			} else {
					manItem.sendCommand(OFF)
			}
		} else {
			logWarn("heating", "Nisem našel ventila za ročno stikalo {}", manItem.toString)	
		}
		logInfo("heating", "In zaključimo {}", manItem.toString)
	]
	logInfo("heating", "Nastavimo logična stikala na OFF")
	Log.sendCommand(OFF)
	LogOgrevanje.sendCommand(OFF)
	logInfo("heating", "********************Konec Ročno proženo upravljnanje z ogrevanjem {}*****************", Override.toString)
end

rule "ManOgrevanje is turned off"
when
	Item Override changed to OFF
then
	logInfo("heating", "***************************Ročno izklopljeno upravljnanje z ogrevanjem {}***************************", ManOgrevanje.toString)
	Man.sendCommand(OFF)
	ManOgrevanje.sendCommand(OFF)
	logInfo("heating", "***************Zato ugašam vse ročne ventile {}********************", Man.toString)
end

rule "heating of a room was requested by logic"
when
	Item LogOgrevanje received command or
	Item ManOgrevanje received command
then
	logInfo("heating", "*************************Pregled in vklop zahtevanih ventilov**************************")
	if (itemsOn === null) {
		logInfo("heating", "Nastavljam seznam za stikal")
		itemsOn = new ArrayList()
	}
	if (itemsOff === null) {
		logInfo("heating", "Nastavljam seznam za stikal")
		itemsOff = new ArrayList()
	}

	startHeating2 = false
	Fhs.members.forEach[fhsItem |
		logInfo("heating", "#####################Preverimo začetno stanje ventila {}", fhsItem.toString)
//		val boolean noVent = !fhsItem.groupNames.filter(group|group.equalsIgnoreCase("FhsRev")).empty
//		logInfo("heating", "Ali je NO ventil {}", noVent)
		val name = fhsItem.name.substring(3)
		if (Override.state == ON) {
			logInfo("heating", "Ročno ogrevanje je aktivno")
			val difItem = Dif.members.filter(differ | differ.name.containsIgnoreCase(name)).head
			logInfo("heating", "Našel dif {}", difItem)
			val Number difTemp = difItem.state as Number
			val manValve = Man.members.filter( manTmpItem | manTmpItem.name.containsIgnoreCase(name)).head
			if (manValve !== null) {
				logInfo("heating", "Našel ročni ventil {}", manValve.toString)
				if (manValve.state == ON && difTemp < 0 && fhsItem.state == OFF) {
					startHeating2 = true
					logInfo("heating", "Ročni ventil je odprt in temperatura {} je nižja od nastavljene", difTemp)
					itemsOn.add(fhsItem)
					// if (!noVent) fhsItem.sendCommand(ON) else fhsItem.sendCommand(OFF)
				} else if ((manValve.state == OFF || difTemp > 0) && fhsItem.state == ON) {
					itemsOff.add(fhsItem)
					logInfo("heating", "Ali je ročni ventil zaprt ali pa je temperatura {} višja od nastavljene", difTemp)
					// if (!noVent) fhsItem.sendCommand(OFF) else if (Man.state == ON)fhsItem.sendCommand(ON)
				}
			} else logInfo("heating", "Nisem našel ročnega ventila")
		} else {
			logInfo("heating", "Logično ogrevanje je aktivno")
			val logValve = Log.members.filter( logTmpItem | logTmpItem.name.containsIgnoreCase(name)).head
			if (logValve !== null) {
				logInfo("heating", "Našel logični ventil {}", logValve.toString)
				if (logValve.state == ON) {
					startHeating2 = true
					logInfo("heating", "Logični ventil je odprt, dodajam na seznam za odpret!")
					itemsOn.add(fhsItem)
//					if (!noVent) fhsItem.sendCommand(ON) else fhsItem.sendCommand(OFF)
				} else if (logValve.state == OFF) {
					logInfo("heating", "Logični ventil je zaprt, dodajam na seznam za zapret!")
					itemsOff.add(fhsItem)
//					if (!noVent) fhsItem.sendCommand(OFF) else if (Log.state == ON) fhsItem.sendCommand(ON)
				}
			} else logInfo("heating", "Nisem našel logičnega ventila")
		}
//		logInfo("heating", "Preverimo končno stanje ventila {}", fhsItem.toString)
	]
	logInfo("heating", "Stanje Heating je {}, stanje startHeating2 pa je {}", Heating.state, startHeating2)
	if (startHeating2) {
		logInfo("heating", "Imam seznam z {} ventili, ki jih potrebno odpreti", itemsOn.size() )
		for (SwitchItem item : itemsOn) {
			if (item.state == OFF && item.groupNames.filter(group|group.equalsIgnoreCase("FhsRev")).empty) {
				item.sendCommand(ON)
				logInfo("heating", "Odpiram nc venitl {}", item.toString )
			} else if (item.state == ON && !item.groupNames.filter(group|group.equalsIgnoreCase("FhsRev")).empty) {
				item.sendCommand(OFF)
				logInfo("heating", "Odpiram no venitl {}", item.toString)
			}
		}
		logInfo("heating", "Imam seznam z {} ventili, ki jih potrebno zapreti", itemsOff.size() )
		for (SwitchItem item : itemsOff) {
			//first nc valves
			if (item.state == ON && item.groupNames.filter(group|group.equalsIgnoreCase("FhsRev")).empty) {
				item.sendCommand(OFF)
				logInfo("heating", "Zapiram nc venitl {}", item.toString )
			} 
			//then no valves
			else if (item.state == OFF && !item.groupNames.filter(group|group.equalsIgnoreCase("FhsRev")).empty) {
				item.sendCommand(ON)
				logInfo("heating", "Zapiram no venitl {}", item.toString )
			} 
		}
		logInfo("heating", "Vklopimo ogrevanje.")
		if (Heating.state == OFF) {
			sendCommand(Heating, ON)
		}
	} else {
		logInfo("heating", "Stanje Heating je {}, stanje Log je {} in Man je {}", Heating.state, Log.state, Man.state)
		if (Heating.state == ON) {
			logInfo("heating", "Izklopim ogrevanje")
			sendCommand(Heating, OFF)
			if (Fhs.state == ON) {
				logInfo("heating", "Vsaj en ventil je še odprt, preverjam in zapiram!")
				Fhs.members.forEach[fhsItem |
					logInfo("heating", "Preverjam ventil {}!", fhsItem.toString)
					if (fhsItem.state == ON) {
						fhsItem.sendCommand(OFF)
						logInfo("heating", "Zapiram ventil {}!", fhsItem.toString)
					}
				]
			}
		}
	}
	logInfo("heating", "Pucam seznam za odpret in zapret")
	itemsOn = null
	itemsOff = null
	logInfo("heating", "*************************Konec pregleda in vklopa zahtevanih ventilov**************************")
end

rule "Heating when ordered"
when
	Item Heating changed
then
	logInfo("heating", "Klic Heating when ordered {}", Heating.toString)
	if (Heating.state == ON) {
		sendCommand(FhsHeater, ON)
		logInfo("heating", "Ogrevanje se je vklopilo {}", FhsHeater.toString)
	} else {
		sendCommand(FhsHeater, OFF)
		logInfo("heating", "Ogrevanje se je izklopilo, izklapljam še morebitne vklopljene ventile")
		//Turn off all the switches since we are not heating anymore
		Fhs.sendCommand(OFF)
	}
end