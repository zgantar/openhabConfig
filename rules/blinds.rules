import org.joda.time.*
import org.openhab.core.library.types.*
import org.openhab.core.library.items.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.apache.commons.lang.StringUtils.*
import org.eclipse.xtext.xbase.lib.*
import org.openhab.model.script.actions.*


val Functions$Function1 getCommand = [ 
	SwitchItem item|
	logInfo("blinds", "Iščemo ukaz za stikalo - " + item.name)
	return item.name.substring(item.name.length - 2, item.name.length)
]

val Functions$Function1 getName = [ 
	SwitchItem item|
	logInfo("blinds", "Iščemo ime")
	return item.name.substring(3, item.name.length - 2)
]

val Functions$Function1 getNameWithCommand = [ 
	SwitchItem item|
	logInfo("blinds", "Iščemo ime z ukazom")
	return item.name.substring(3, item.name.length)
]

val Functions$Function1 getNameWithOppositeCommand = [ 
	SwitchItem item|
	logInfo("blinds", "Iščemo nasprotno ime z ukazom")
	if (item.name.substring(item.name.length - 2, item.name.length).toString.equals("Up")) {
		return item.name.substring(3, item.name.length - 2).concat("Do")
	} else {
		return item.name.substring(3, item.name.length - 2).concat("Up")
	}
]


val Functions$Function2 checkSwiItem = [
	SwitchItem item,
	int logOrSwi|

	val lastUpdateTime = item.historicState(now.minusMinutes(10)).timestamp.time
	logInfo("blinds", "Premik žaluzij zahtevalo ročno stikalo - preverjam ali je stikalo vklopljeno že dalj časa " + item.name + " ----- " + lastUpdateTime)
	logInfo("blinds", "Trenutni čas " + "----" + now)
	val timeDifference = now.millis - lastUpdateTime
	if (logOrSwi == 1) {
		if (timeDifference > 300000) {
			if (item.name.substring(item.name.length - 2, item.name.length).equals("Up")) {
				logInfo("blinds", "Dvig žaluzij zahtevalo ročno stikalo pred več kot 5. minutami, očitno pozabili izklopiti zato ignoriram")
				var oppActItem = BlindAct.members.filter(filtItem | filtItem.name.containsIgnoreCase(item.name.substring(3, item.name.length - 2).concat("Do"))).head
				logInfo("blinds", "Izklapljam aktuator - " + oppActItem.name)
				activateActBlind.apply(oppActItem, 0)
				logInfo("blinds", "Dvigam žaluzijo - " + item.name)
				activateActBlind.apply(item, 1)
			} else {
				logInfo("blinds", "Spust žaluzij zahtevalo ročno stikalo pred več kot 5. minutami, očitno pozabili izklopiti zato ignoriram")
				var oppActItem = BlindAct.members.filter(filtItem | filtItem.name.containsIgnoreCase(item.name.substring(3, item.name.length - 2).concat("Up"))).head
				logInfo("blinds", "Izklapljam aktuator - " + oppActItem.name)
				activateActBlind.apply(oppActItem, 0)
				logInfo("blinds", "Spuščam žaluzijo - " + item.name)
				activateActBlind.apply(item, 1)
			}
		} 
	} else if (logOrSwi == 0) {
		if (timeDifference <= 3000){
			logInfo("blinds", "Premik žaluzij zahtevalo ročno stikalo ob " + (item.lastUpdate) + " in bilo je krajše od 3 sekund zato takoj izklopim")
			activateActBlind.apply(item, 0)
		}
		
	}
	true
]

val Functions$Function2 activateActBlind = [ 
	SwitchItem item,
	int on|
	
	logInfo("blinds", "Klic activateActBlind za " + item.name.toUpperCase)
	var Timer shutDownTimer = null
	val command = item.name.substring(item.name.length - 2, item.name.length)
	val name = item.name.substring(3, item.name.length - 2)
	val actItem = BlindAct.members.filter(filtItem | filtItem.name.containsIgnoreCase(item.name.substring(3, item.name.length - 1))).head
	logInfo("blinds", "Drugi korak v activateActBlind za " + command.toUpperCase)
	if (on == 1) {
		if (command.equalsIgnoreCase("Up")) {
			logInfo("blinds", "Tretji korak v activateActBlind za " + command.toUpperCase)
			var oppActItem = BlindAct.members.filter(filtItem | filtItem.name.containsIgnoreCase(name.toString.concat("Do"))).head
			logInfo("blinds", "Četrti korak v activateActBlind za " + oppActItem.name)
			if (oppActItem.state == ON) {
				logInfo("blinds", "!!!!!!!!!!!!!!!Našel signal na aktuatorju za nasprotno smer " + oppActItem.name.toUpperCase + "!!!!!!!!!!!!!!!!!!!!!!!!")
				if (item.name.substring(0, 2).equalsIgnoreCase("Swi")) {
					logInfo("blinds", "!!!!!!!!!!!!!!!Ukaz za nasprotno smer prišel s stikala zato ga izvedemo!!!!!!!!!!!!!!!!!!!!!!!!")
					//še ne vem ali bo rekurzija delala v lambda funkciji
					activateActBlind.apply(oppActItem, 0)
					activateActBlind.apply(actItem, 1)
				}
			} else {
				logInfo("blinds", "###############Dvigam žaluzijo " + actItem.name.toUpperCase + "##########################")
//				actItem.sendCommand(ON)
				shutDownTimer = createTimer(now.plusMinutes(1)) [|
					logInfo("blinds", "###############Končal dvig žaluzije " + actItem.name.toUpperCase + "##########################")
					actItem.sendCommand(OFF)
					if (item.name.substring(0,2).equalsIgnoreCase("Log")) {
						item.sendCommand(OFF)
					}
				]
				shutDownTimer = null
			}
		} else {
			logInfo("blinds", "Tretji korak v activateActBlind za " + command.toUpperCase)
			val oppActItem = BlindAct.members.filter(filtItem | filtItem.name.containsIgnoreCase(name.toString.concat("Up"))).head
			if (oppActItem.state == ON) {
				logInfo("blinds", "!!!!!!!!!!!!!!!Našel signal na aktuatorju za nasprotno smer " + oppActItem.name.toUpperCase + "!!!!!!!!!!!!!!!!!!!!!!!!!")
				if (item.name.substring(0, 2).equalsIgnoreCase("Swi")) {
					logInfo("blinds", "!!!!!!!!!!!!!!!Ukaz za nasprotno smer prišel s stikala zato ga izvedemo!!!!!!!!!!!!!!!!!!!!!!!!")
					activateActBlind.apply(oppActItem, 0)
					activateActBlind.apply(actItem, 1)
				}
			} else {
				logInfo("blinds", "###############Spuščam žaluzijo " + actItem.name.toUpperCase + "#########################")
//				actItem.sendCommand(ON)				
				shutDownTimer = createTimer(now.plusMinutes(1)) [|
					logInfo("blinds", "###############Končal spust žaluzije " + actItem.name.toUpperCase + "##########################")
					actItem.sendCommand(OFF)
					if (item.name.substring(0,2).equalsIgnoreCase("Log")) {
						item.sendCommand(OFF)
					}
				]
				shutDownTimer = null
			}
		}
 	} else {
		logInfo("blinds", "###############Končal akcijo na žaluziji " + actItem.name.toUpperCase + "#########################")
		actItem.sendCommand(OFF)
	}
	return true
]

rule "Process command from logic"
when
	Item BlindLog changed
then
	//getting the switch that produced the action
	BlindLog.members.filter(log|log.state == ON).forEach[logItem|
		val actionerName = getName.apply(logItem).toString
		logInfo("blinds", "######################Dobil ukaz logičnega stikala - " + actionerName.toUpperCase + "##########################")
		val actionerCommandName = getCommand.apply(logItem).toString

		if (actionerCommandName.toString.equalsIgnoreCase("Do")) {	
			logInfo("blinds", "Dobil ukaz za spust žaluzij")
			val swiItem = BlindSwi.members.filter(filtItem|filtItem.name.containsIgnoreCase(getNameWithOppositeCommand.apply(logItem))).head
			logInfo("blinds", "Preverjam obratno fizično stikalo - " + swiItem.name)
			if (swiItem.state == OFF) {
				logInfo("blinds", "Dvig žaluzij zahtevalo ročno stikalo - preverjam naprej!")
				checkSwiItem.apply(swiItem, 1)
			} else {
				logInfo("blinds", "Fizično stikalo ni vklopljeno!")
				logInfo("blinds", "###############Spuščam žaluzijo " + actionerName.toString.toUpperCase + "!!!!#####################")
				activateActBlind.apply(logItem, 1)
			}
		} else {
			logInfo("blinds", "Dobil ukaz za dvig žaluzij")
			val swiItem = BlindSwi.members.filter(filtItem|filtItem.name.containsIgnoreCase(getNameWithOppositeCommand.apply(logItem))).head
			logInfo("blinds", "Preverjam fizično stikalo - " + swiItem.name)
			if (swiItem.state == OFF) {
				logInfo("blinds", "Spust žaluzij zahtevalo ročno stikalo - preverjam naprej!")
				checkSwiItem.apply(swiItem, 1)
			} else {
				logInfo("blinds", "Fizično stikalo ni vklopljeno!")
				logInfo("blinds", "###############Dvigam žaluzijo " + actionerName.toString.toUpperCase + "!!!!#####################")
				activateActBlind.apply(logItem, 1)
			}
		}
	]
	//treba preverit, če se je izklopilo stikalo
	BlindAct.members.filter(log|log.state == ON).forEach[actItem |
		logInfo("blinds", "Našel aktuator, ki je vklopljen - " + actItem.name)
		val logItem = BlindLog.members.filter(filter|filter.name.equalsIgnoreCase(getNameWithCommand.apply(actItem).toString)).head
		logInfo("blinds", "Preverimo ali je bil prožen z logičnim stikalom - " + logItem.toString)
		if (logItem.state == OFF) {
			logInfo("blinds", "Logično stikalo ni sprožilo žaluzije, preverjamo fizično")
			val swiItem = BlindSwi.members.filter(filter|filter.name.equalsIgnoreCase(getNameWithCommand.apply(actItem).toString)).head
			logInfo("blinds", "Preverimo ali je bil prožen s fizičnim stikalom - " + swiItem.toString)
			if (swiItem.state == OFF) {
				logInfo("blinds", "Fizično stikalo je sproženo, pustimo stat")
			} else {
				logInfo("blinds", "Fizično stikalo ni sprožilo žaluzije, ustavimo žaluzijo")
				activateActBlind.apply(actItem, 0)
			}
		} else {
			logInfo("blinds", "Logično stikalo je sproženo, pustimo stat")
		}
	]
end

rule "Process command from switches"
when
	Item BlindSwi changed
then
	//ko bom dodal v bazo bo mrbit delal
//	val swiItem = BlindSwi.members.sortBy[lastUpdate].last as SwitchItem
	logInfo("blinds", "################Dobil ukaz ročnega stikala################")
	//getting the switch that produced the action
	BlindSwi.members.filter(log|log.state == OFF).forEach[swiItem |
//	BlindSwi.members.forEach[swiItem |
		logInfo("blinds", "Našel stikalo - " + swiItem.name)
		val actionerName = getName.apply(swiItem)
		logInfo("blinds", "Dobil ukaz ročnega stikala - " + actionerName.toString.toUpperCase)
		val actionerCommandName = getCommand.apply(swiItem)
		logInfo("blinds", "Dobil ukaz - " + actionerCommandName.toString.toUpperCase)
		if (actionerCommandName.toString.equalsIgnoreCase("Do")) {	
			logInfo("blinds", "Dobil ukaz za spust žaluzij")
			var logItem = BlindLog.members.filter(filtItem|filtItem.name.containsIgnoreCase(getNameWithOppositeCommand.apply(swiItem))).head
			logInfo("blinds", "Preverjam nasprotno logično stikalo - " + logItem.toString)
			if (logItem.state == ON) {
				logInfo("blinds", "Dvig žaluzij zahtevala logika, preklicujem!")
				logItem.sendCommand(OFF)
				activateActBlind.apply(logItem, 0)
<<<<<<< HEAD
=======
				logInfo("blinds", "###############Spuščam žaluzijo " + actionerName.toString.toUpperCase + "!!!!#####################")
				activateActBlind.apply(swiItem, 1)
			} else {
				logInfo("blinds", "###############Spuščam žaluzijo " + actionerName.toString.toUpperCase + "!!!!#####################")
				activateActBlind.apply(swiItem, 1)
>>>>>>> origin/master
			}
			logInfo("blinds", "###############Spuščam žaluzijo " + actionerName.toString.toUpperCase + "!!!!#####################")
			activateActBlind.apply(swiItem, 1)
		} else {
			logInfo("blinds", "Dobil ukaz za dvig žaluzij")
			var logItem = BlindLog.members.filter(filtItem|filtItem.name.containsIgnoreCase(getNameWithOppositeCommand.apply(swiItem))).head
			logInfo("blinds", "Preverjam nasprotno logično stikalo - " + logItem.toString)
			if (logItem.state == ON) {
				logInfo("blinds", "Spust žaluzij zahtevala logika, preklicujem!")
				logItem.sendCommand(OFF)
				activateActBlind.apply(logItem, 0)
<<<<<<< HEAD
=======
				logInfo("blinds", "###############Dvigam žaluzijo " + actionerName.toString.toUpperCase + "!!!!#####################")
				activateActBlind.apply(swiItem, 1)
			} else {
				logInfo("blinds", "###############Dvigam žaluzijo " + actionerName.toString.toUpperCase + "!!!!#####################")
				activateActBlind.apply(swiItem, 1)
>>>>>>> origin/master
			}
			logInfo("blinds", "###############Dvigam žaluzijo " + actionerName.toString.toUpperCase + "!!!!#####################")
			activateActBlind.apply(swiItem, 1)
			
		}
	]
	//treba preverit, če se je izklopilo stikalo
	BlindAct.members.filter(log|log.state == ON).forEach[actItem |
		logInfo("blinds", "Našel aktuator, ki je vklopljen - " + actItem.name)
		val swiItem = BlindSwi.members.filter(filter|filter.name.equalsIgnoreCase(getNameWithCommand.apply(actItem).toString)).head
		logInfo("blinds", "Preverimo ali je bil prožen s fizičnim stikalom - " + swiItem.toString)
		if (swiItem.state == ON) {
			logInfo("blinds", "Fizično stikalo ni sprožilo žaluzije, preverjamo logično")
			val logItem = BlindLog.members.filter(filter|filter.name.equalsIgnoreCase(getNameWithCommand.apply(actItem).toString)).head
			logInfo("blinds", "Preverimo ali je bil prožen z logičnim stikalom - " + logItem.toString)
			if (logItem.state == ON) {
				logInfo("blinds", "Logično stikalo je sproženo, pustimo stat")
			} else {
				logInfo("blinds", "Logično stikalo ni sprožilo žaluzije, ustavimo žaluzijo")
				logInfo("blinds", "Potrebno preveriti dolžino pritiska fizičnega stikala")
				checkSwiItem.apply(swiItem, 0)
//				activateActBlind.apply(actItem, 0)
			}
		} else {
			logInfo("blinds", "Fizično stikalo je sproženo")
		}
	]
end
 
rule "Set blinds up"
when
	System started
then
	BlindLog.send(OFF)
	
	logInfo("blinds", "###############Začetna nastavitev žaluzij#####################")
	BlindSwi.members.forEach[ swiItem |
		logInfo("blinds", "Našel fizično stikalo " + swiItem.toString + "!!!!")
		if (swiItem.state == OFF) {
			activateActBlind.apply(swiItem, 1)
		} else {
			activateActBlind.apply(swiItem, 0)
		}
	]
	logInfo("blinds", "###############Konec začetne nastavitve žaluzij#####################")
end