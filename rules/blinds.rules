import org.joda.time.*
import org.openhab.core.library.types.*
import org.openhab.core.library.items.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.apache.commons.lang.StringUtils.*
import org.eclipse.xtext.xbase.lib.*
import org.openhab.model.script.actions.*
import java.util.Map

val int PEEK = 1000
val int COMPLETE = 60000
var Map<String, Timer> timers 

val Functions$Function2 getStringFromItem = [ 
	SwitchItem item,
	int whatToGet|
	
	var String returnString = null
	switch whatToGet{
		case 1: {
				logInfo("blinds", "getStringFromItem - Iščemo ukaz " + item.name.substring(item.name.length - 2, item.name.length))
				returnString = item.name.substring(item.name.length - 2, item.name.length)
			}
		case 2: {
				logInfo("blinds", "getStringFromItem - Iščemo ime " + item.name.substring(3, item.name.length - 2))
				returnString = item.name.substring(3, item.name.length - 2)
			}
		case 3: {
				logInfo("blinds", "getStringFromItem - Iščemo ime z ukazom " + item.name.substring(3, item.name.length))
				returnString = item.name.substring(3, item.name.length)
			}
		case 4: {
				logInfo("blinds", "getStringFromItem - Iščemo nasprotno ime z ukazom")
				if (item.name.substring(item.name.length - 2, item.name.length).toString.equals("Up")) {
					logInfo("blinds", "getStringFromItem - Iščemo nasprotno ime z ukazom " + item.name.substring(3, item.name.length - 2).concat("Do"))
					returnString = item.name.substring(3, item.name.length - 2).concat("Do")
				} else {
					logInfo("blinds", "getStringFromItem - Iščemo nasprotno ime z ukazom " + item.name.substring(3, item.name.length - 2).concat("Up"))
					returnString = item.name.substring(3, item.name.length - 2).concat("Up")
				}
			}
		case 5: {
				logInfo("blinds", "getStringFromItem - Iščem ime za peek stikalo " + item.toString)
				returnString = item.name.substring(4, item.name.length)
			}
	}
	return returnString
]

val Functions$Function5 executeSwiItem = [
	SwitchItem item,
	int timeToBeActive,
	Map<String, Timer> timers,
	Functions$Function5 activateActBlind,
	Functions$Function2 getStringFromItem|
	
	logInfo("blinds", "executeSwiItem ---------------Procesiram ukaz ročnega stikala start - " + item.toString + "---------------")
	val nameWithOppositeCommand = getStringFromItem.apply(item, 4).toString
	logInfo("blinds", "executeSwiItem - Ime nasprotnega stikala - " + nameWithOppositeCommand)
	//checking to see if the IO has gone bannanas
	var swiItem = blindswi.members.filter(filtItem|filtItem.name.containsIgnoreCase(nameWithOppositeCommand)).head
	logInfo("blinds", "executeSwiItem - Nasprotno fizično stikalo - " + swiItem.toString)
	if (swiItem.state == ON) {
		logInfo("blinds", "executeSwiItem - Očitno je vse OK")
		var logItem = BlindLog.members.filter(filtItem|filtItem.name.containsIgnoreCase(nameWithOppositeCommand)).head
		logInfo("blinds", "executeSwiItem - Nasprotno logično stikalo - " + logItem.toString)
		if (logItem.state == ON) {
			logInfo("blinds", "executeSwiItem - Premik žaluzij zahtevala logika, preklicujem!")
			logItem.sendCommand(OFF)
			logInfo("blinds", "executeSwiItem ----------------Konec preverjanja logičnega stikala, premikam žaluzijo " + item.toString + "--------------")
			activateActBlind.apply(item, 1, timeToBeActive, timers, getStringFromItem)
		} else {
			logInfo("blinds", "executeSwiItem --------------Ni zahteve s strani logike, premikam žaluzijo " + item.toString + "--------------------")
			activateActBlind.apply(item, 1, timeToBeActive, timers, getStringFromItem)
		}
	}
	return true
]

val Functions$Function4 stopExecuteSwiItem = [
	SwitchItem item,
	Map<String, Timer> timers,
	Functions$Function5 activateActBlind,
	Functions$Function2 getStringFromItem|
	
	logInfo("blinds", "stopExecuteSwiItem ---------------Procesiram konec ukaza ročnega stikala stop - " + item.toString + "---------------")
	var actItem = BlindAct.members.filter(filtItem|filtItem.name.containsIgnoreCase(getStringFromItem.apply(item, 3))).head
	logInfo("blinds", "stopExecuteSwiItem - Aktuator je - " + actItem.toString.toUpperCase)
	val boolean lowAct = !actItem.groupNames.filter(group|group.equalsIgnoreCase("BlindRev")).empty
	if (if(!lowAct)actItem.state == ON else actItem.state == OFF) {
		logInfo("blinds", "stopExecuteSwiItem - Aktuator je aktiven, preverjam čas!")
		val lastUpdateTime = actItem.previousState.timestamp.time
		logInfo("blinds", "stopExecuteSwiItem - Preverjam nasprotno fizično stikalo ali je vklopljeno in koliko časa " + actItem.name + " ----- " + lastUpdateTime)
		logInfo("blinds", "stopExecuteSwiItem - V našem času je to " + "----" + actItem.lastUpdate)
		logInfo("blinds", "stopExecuteSwiItem - Trenutni čas " + "----" + now)
		val timeDifference = now.millis - lastUpdateTime
		logInfo("blinds", "Razlika je " + "----" + timeDifference)
		if (timeDifference <= 2000){
			logInfo("blinds", "stopExecuteSwiItem - Premik žaluzij zahtevalo ročno stikalo ob " + (actItem.lastUpdate) + " in bilo je krajše od 2 sekund zato takoj izklopim")
			activateActBlind.apply(item, 0, 0, timers, getStringFromItem)
		}
	} else {
		val timer = timers.remove(getStringFromItem.apply(item, 3).toString)
		logInfo("blinds", "stopExecuteSwiItem - Aktuator ni aktiven zato ignoriram! Preverjam timerje in po potrebi pucam, kar zmanjša mapo na " + timers.size)
		if (timer != null) timer.cancel
	}
	return true
]

val Functions$Function5 executeLogItem = [
	SwitchItem item,
	int timeToBeActive,
	Map<String, Timer> timers,
	Functions$Function5 activateActBlind,
	Functions$Function2 getStringFromItem|

	logInfo("blinds", "executeLogItem ----------------Procesiram ukaz logičnega stikala - " + item.toString + "----------------")
	val nameWithOppositeCommand = getStringFromItem.apply(item, 4).toString
	logInfo("blinds", "executeLogItem - Ime nasprotnega stikala - " + nameWithOppositeCommand.toString.toUpperCase)
	var oppSwiItem = blindswi.members.filter(filtItem|filtItem.name.containsIgnoreCase(nameWithOppositeCommand)).head
	logInfo("blinds", "executeLogItem - Nasprotno fizično stikalo - " + oppSwiItem.toString)
	logInfo("blinds", "executeLogItem - Kolikšen naj bo premik - " + timeToBeActive)
	if (oppSwiItem.state == OFF) {
		val lastUpdateTime = oppSwiItem.previousState.timestamp.time
		logInfo("blinds", "executeLogItem - Preverjam nasprotno fizično stikalo ali je vklopljeno in koliko časa " + oppSwiItem.name + " ----- " + lastUpdateTime)
		logInfo("blinds", "executeLogItem - V našem času je to " + "----" + oppSwiItem.lastUpdate)
		logInfo("blinds", "executeLogItem - Trenutni čas " + "----" + now)
		val timeDifference = now.millis - lastUpdateTime
		logInfo("blinds", "executeLogItem - Razlika je " + "----" + timeDifference)
		if (timeDifference > 300000) {
			logInfo("blinds", "executeLogItem - Premik žaluzij zahtevalo ročno stikalo pred več kot 5. minutami, očitno pozabili izklopiti zato ignoriram in premikam žaluzijo " + item.toString)
			activateActBlind.apply(item, 1, timeToBeActive, timers, getStringFromItem)
		} else {
			logInfo("blinds", "executeLogItem - Premik žaluzij zahtevalo ročno stikalo manj kot 5 min nazaj, zato ignoriram logični ukaz!")
		}
	} else {
		logInfo("blinds", "executeLogItem - Ni zahteve s strani fizičnega stikala, premikam žaluzije!")
		activateActBlind.apply(item, 1, timeToBeActive, timers, getStringFromItem)
	}
	return true
]


val Functions$Function5 activateActBlind = [ 
	SwitchItem item,
	int on,
	int timeToBeActive,
	Map<String, Timer> timers,
	Functions$Function2 getStringFromItem|
	
	var Timer timer = null
	var Timer shutDownTimer = null
	logInfo("blinds", "activateActBlind - Klic activateActBlind za " + item.toString)
	val String nameWithCommand = getStringFromItem.apply(item, 3).toString
	val actItem = BlindAct.members.filter(filtItem | filtItem.name.containsIgnoreCase(nameWithCommand)).head
	logInfo("blinds", "activateActBlind - Dobili aktuator " + actItem.toString)
	val boolean lowAct = !actItem.groupNames.filter(group|group.equalsIgnoreCase("BlindRev")).empty
	logInfo("blinds", "activateActBlind - Ali imamo obratno stikalo " + lowAct)
	val boolean logBlind = !item.groupNames.filter(group|group.equalsIgnoreCase("BlindLog")).empty
	logInfo("blinds", "activateActBlind - Ali imamo logično stikalo " + logBlind)
	val peekSwitch = blindsPeek.members.filter(filtItem | filtItem.name.containsIgnoreCase(getStringFromItem.apply(item, 2).toString)).head
	val boolean downCommand = actItem.name.substring(item.name.length - 2, item.name.length).equals("Do")
	logInfo("blinds", "activateActBlind - Ali je ukaz za spust " + downCommand)
	var oppActItem = BlindAct.members.filter(filtItem | filtItem.name.containsIgnoreCase(getStringFromItem.apply(item, 4).toString)).head
	logInfo("blinds", "activateActBlind - Našli nasprotni aktuator " + oppActItem.toString)
	val stateItem = blindstate.members.filter(filtItem | filtItem.name.containsIgnoreCase(getStringFromItem.apply(item, 2))).head
	logInfo("blinds", "activateActBlind - Našli stanje " + stateItem.toString)
	val stanje = stateItem.state as Number
	logInfo("blinds", "activateActBlind - Stanje žaluzije - " + stanje)
	if (on == 1) {
//		if (stanje == 0 && downCommand) logInfo("blinds", "Glede na stanje in na ukaz - " + downCommand + " , nam žaluzije ni potrebno premikati.")
//		else {			
			if (if (!lowAct)oppActItem.state == ON else oppActItem.state == OFF) {
				logInfo("blinds", "activateActBlind - !!!!!!!!!!!!!!!Našel signal na aktuatorju za nasprotno smer " + oppActItem.toString + " Izklapljam!!!!!!!!!!!!!!!!!!!!!!!!")
				//preklicat mormo timer in nastvati pravilno stanje
				val lastUpdateTime = oppActItem.previousState.timestamp.time
				logInfo("blinds", "activateActBlind - Preverjam nasprotni aktuator koliko časa " + oppActItem.name+ " ----- " + lastUpdateTime)
				logInfo("blinds", "activateActBlind - V našem času je to " + "----" + oppActItem.lastUpdate)
				logInfo("blinds", "activateActBlind - Trenutni čas " + "----" + now)
				if (!lowAct)oppActItem.sendCommand(OFF) else oppActItem.sendCommand(ON)
				val timeDifference = now.millis - lastUpdateTime
				if (downCommand) {
					logInfo("blinds", "activateActBlind - Ker je ukaz za spust prekinil ukaz za dvig, moramo stanje povečati za " + timeDifference)
					val change = stateItem.state as Number + timeDifference
					if (change > 60000) stateItem.postUpdate(60000)
					else stateItem.postUpdate(change)
				} else {
					logInfo("blinds", "activateActBlind - Ker je ukaz za dvig prekinil ukaz za spust, moramo stanje zmanjšati za " + timeDifference)
					val change = stateItem.state as Number - timeDifference
					if (change < 0) stateItem.postUpdate(0)
					else stateItem.postUpdate(change)
				}
				timer = timers.remove(getStringFromItem.apply(oppActItem, 3).toString)
				logInfo("blinds", "activateActBlind - Ker smo ročno prekinili premik žaluzij prekinjamo timer - " + oppActItem.toString + ", kar zmanjša mapo na " + timers.size)
				if (timer != null) timer.cancel 
				//nadaljujmo
				logInfo("blinds", "activateActBlind -----------Izvajam posredovani ukaz za žaluzijo " + actItem.toString + "--------------------------")
				if (!lowAct)actItem.sendCommand(ON) else actItem.sendCommand(OFF) 
					shutDownTimer = createTimer(now.plusMillis(timeToBeActive)) [|
						logInfo("blinds", "activateActBlind ---------------Končal posredovani ukaz za žaluzijo " + actItem.toString + "--------------------------")
						if (!lowAct)actItem.sendCommand(OFF) else actItem.sendCommand(ON) 
						if (downCommand) stateItem.postUpdate(stateItem.state as Number - timeToBeActive)
						else stateItem.postUpdate(stateItem.state as Number + timeToBeActive)
						logInfo("blinds", "activateActBlind - Stanje žaluzije - " + stateItem.state as Number)
						if (logBlind) {
							logInfo("blinds", "activateActBlind - Nastavim logično stikalo na OFF")
							item.sendCommand(OFF)
							if (peekSwitch != null) {
								logInfo("blinds", "activateActBlind - Nastavim peek stikalo na OFF - " + peekSwitch.toString)
								peekSwitch.sendCommand(OFF)
							} else {
								logInfo("blinds", "activateActBlind - Ni bil prožen premik")
							}
						}
					]
				timers.put(nameWithCommand, shutDownTimer)
				logInfo("blinds", "activateActBlind - Vstavimo nov timer " + nameWithCommand + ", kar poveča mapo na " + timers.size)
			} else {
				logInfo("blinds", "activateActBlind ---------------Izvajam posredovani ukaz za žaluzijo " + actItem.toString + "--------------------------")
				if (!lowAct)actItem.sendCommand(ON) else actItem.sendCommand(OFF) 
					shutDownTimer = createTimer(now.plusMillis(timeToBeActive)) [|
						logInfo("blinds", "activateActBlind ---------------Končal posredovani ukaz za žaluzijo " + actItem.toString + "--------------------------")
						if (!lowAct)actItem.sendCommand(OFF) else actItem.sendCommand(ON)
						val timeDifference = stateItem.state as Number - timeToBeActive
						if (downCommand) {
							val razlika = stateItem.state as Number - timeDifference
							logInfo("blinds", "activateActBlind - Ker je ukaz za konec spusta, moramo stanje zmanjšati za " + timeDifference)
							if (razlika < 0) stateItem.postUpdate(0)
							else stateItem.postUpdate(razlika) 
						} else {
							val vsota = stateItem.state as Number + timeDifference
							logInfo("blinds", "activateActBlind - Ker je ukaz za konec dviga, moramo stanje povečati za " + timeDifference)
							if (vsota > 60000) stateItem.postUpdate(60000)
							else stateItem.postUpdate(vsota)
						}
						logInfo("blinds", "activateActBlind - Novo stanje žaluzije je - " + stateItem.state as Number)
						if (logBlind) {
							logInfo("blinds", "activateActBlind - Nastavim logično stikalo na OFF")
							item.sendCommand(OFF)
							if (peekSwitch != null) {
								logInfo("blinds", "activateActBlind - Nastavim peek stikalo na OFF - " + peekSwitch.toString)
								peekSwitch.sendCommand(OFF)
							} else {
								logInfo("blinds", "activateActBlind - Ni bil prožen premik")
							}
						}
					]
				timers.put(nameWithCommand, shutDownTimer)
				logInfo("blinds", "activateActBlind - Vstavimo nov timer " + nameWithCommand + ", kar poveča mapo na " + timers.size)
			}
//		}
	} else {
		logInfo("blinds", "activateActBlind ---------------Končal akcijo na žaluziji " + actItem.name.toUpperCase + "---------------------")
		//preklicat mormo timer in nastvati pravilno stanje
		val lastUpdateTime = actItem.previousState.timestamp.time
		logInfo("blinds", "activateActBlind - Preverjam nasprotni aktuator koliko časa " + actItem.toString+ " ----- " + lastUpdateTime)
		logInfo("blinds", "activateActBlind - V našem času je to " + "----" + actItem.lastUpdate)
		logInfo("blinds", "activateActBlind - Trenutni čas " + "----" + now)
		if (!lowAct)actItem.sendCommand(OFF) else actItem.sendCommand(ON)
		val timeDifference = now.millis - lastUpdateTime
		if (timeDifference < 60000) {
			if (downCommand) {
				logInfo("blinds", "activateActBlind - Ker je ukaz za konec spusta, moramo stanje zmanjšati za " + timeDifference)
				val razlika = stateItem.state as Number - timeDifference
				if (razlika < 0) stateItem.postUpdate(0)
				else stateItem.postUpdate(razlika)
			} else {
				logInfo("blinds", "activateActBlind - Ker je ukaz za konec dviga, moramo stanje povečati za " + timeDifference)
				val vsota = stateItem.state as Number + timeDifference
				logInfo("blinds", "activateActBlind - PREVERJAM: 60000")
				if (vsota > 60000) stateItem.postUpdate(60000)
				else stateItem.postUpdate(vsota)
			}
			logInfo("blinds", "activateActBlind - Novo stanje je: " + stateItem.toString)
			logInfo("blinds", "activateActBlind - Prekinjamo timer, ker smo ročno prekinili premik žaluzij!")
			logInfo("blinds", "activateActBlind - Iščemo timer za " + actItem.toString)
			timer = timers.remove(getStringFromItem.apply(actItem, 3).toString)
			logInfo("blinds", "activateActBlind - Ker smo prekinili premik žaluzij prekinjamo timer - " + oppActItem.toString + ", kar zmanjša mapo na " + timers.size)
			if (timer != null) timer.cancel 
		}
		//nadaljujmo
	}
	logInfo("blinds", "activateActBlind - Trenutna velikost mape je - " + timers.size)
	return true
]

rule "Set blinds up"
when
	System started
then
	logInfo("blinds", "Set blinds up - ###############Začetna nastavitev žaluzij#####################")
	blinds.members.forEach[blindsItem|
		if ((blindsItem.state == 'Uninitialized') || (blindsItem.state == 'Undefined')) {
			logDebug("blinds", "Set blinds up - Našel neicializirano stanje za " + blindsItem.toString + "!!!!")
			blindsItem.sendCommand(OFF)
		}
	]
	blindswi.members.forEach[ swiItem |
		logInfo("blinds", "Set blinds up - Našel fizično stikalo " + swiItem.toString + "!!!!")
		if (swiItem.state == OFF) {
			activateActBlind.apply(swiItem, 1, COMPLETE, timers, getStringFromItem)
		} else {
			activateActBlind.apply(swiItem, 0, 0, timers, getStringFromItem)
		}
	]
	blindstate.members.forEach[stateItem|
		logInfo("blinds", "Set blinds up - Preverjam stanje za - " + stateItem.toString)
//		if ((stateItem.state == Uninitialized) || (stateItem.state == Undefined) || (stateItem.state as Number) < 0) {
			stateItem.postUpdate(0.0)
			logDebug("blinds", "Set blinds up - Novo stanje je " + stateItem.toString + "!!!!")
//		}
	]
	if (timers == null) {
		logInfo("blinds", "Set blinds up - Nastavljam timerje")
		timers = newHashMap
		logInfo("blinds", "Set blinds up - Timerji so veliki - " +timers.size)
	}
	blindsPeek.members.forEach[blindsItem|
		blindsItem.sendCommand(OFF)
	]
	
	logInfo("blinds", "Set blinds up - ###############Konec začetne nastavitve žaluzij#####################")
end

rule "All blinds open"
when
	Item AllCompleteUp changed to ON
then
	logInfo("blinds", "All blinds open - ###############Vse žaluzije gor#####################")
	val collection = BlindLog.members.filter(item|item.name.containsIgnoreCase("Up"))
	logInfo("blinds", "All blinds open - Imamo " + collection.size + " žaluzij")
	collection.forEach[logItem |
		logInfo("blinds", "All blinds open - Sem v zanki z logičnim stikalom - " + logItem.toString)
		logItem.sendCommand(ON)
	]
	logInfo("blinds", "All blinds open - ###############Konec vse žaluzije gor#####################")
	sendCommand(AllCompleteUp, OFF)
end

rule "All blinds close"
when
	Item AllCompleteDo changed to ON
then
	logInfo("blinds", "All blinds close - ###############Vse žaluzije dol#####################")
	val collection = BlindLog.members.filter(item|item.name.containsIgnoreCase("Do"))
	logInfo("blinds", "All blinds close - Imamo " + collection.size + " žaluzij")
	collection.forEach[logItem |
		logInfo("blinds", "All blinds close - Sem v zanki za aktuatorjem - " + logItem.toString)
		logItem.sendCommand(ON)
	]
	logInfo("blinds", "All blinds close - ###############Konec vse žaluzije dol#####################")
	sendCommand(AllCompleteDo, OFF)
end

rule "All blinds peek"
when
	Item AllPeek changed to ON
then
	logInfo("blinds", "All blinds peek - ###############Vse žaluzije premakni#####################")
	val collection = blindsPeek.members
	logInfo("blinds", "All blinds peek - Imamo " + collection.size + " žaluzij")
	collection.forEach[peekItem |
		peekItem.sendCommand(ON)
		val logItem = BlindLog.members.filter(item|item.name.containsIgnoreCase(getStringFromItem.apply(peekItem, 5).toString + "Up")).head
		if (logItem != null) {
			logInfo("blinds", "All blinds peek - Sem v zanki z logičnim stikalom - " + logItem.toString)
			logItem.sendCommand(ON)
		} else {
			logError("blinds", "All blinds peek - Nisem našel logičnega stikala za peek stikalo - " + peekItem.toString)
		}
	]
	logInfo("blinds", "All blinds peek - ###############Konec vse žaluzije premakni#####################")
	sendCommand(AllPeek, OFF)
end

rule "All blinds close peek"
when
	Item AllPeekClose changed to ON
then
	logInfo("blinds", "All blinds close peek - ###############Vse žaluzije zapri#####################")
	val collection = blindsPeek.members
	logInfo("blinds", "All blinds close peek - Imamo " + collection.size + " žaluzij")
	collection.forEach[peekItem |
		peekItem.sendCommand(ON)
		val logItem = BlindLog.members.filter(item|item.name.containsIgnoreCase(getStringFromItem.apply(peekItem, 5).toString + "Do")).head
		if (logItem != null) {
			logInfo("blinds", "All blinds close peek - Sem v zanki z logičnim stikalom - " + logItem.toString)
			logItem.sendCommand(ON)
		} else {
			logError("blinds", "All blinds close peek - Nisem našel logičnega stikala za peek stikalo - " + peekItem.toString)
		}
	]
	logInfo("blinds", "All blinds close peek - ###############Konec vse žaluzije zapri#####################")
	sendCommand(AllPeekClose, OFF)
end

//Kabinet
rule "Kabinet blind close start"
when
	Item SwiKabinetDo changed to OFF
then
	logInfo("blinds", "###############Kabinet žaluzije dol start#####################")
	executeSwiItem.apply(SwiKabinetDo, COMPLETE, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec kabinet žaluzija dol start#####################")
end

rule "Kabinet blind close stop"
when
	Item SwiKabinetDo changed to ON
then
	logInfo("blinds", "###############Kabinet žaluzije dol stop#####################")
	stopExecuteSwiItem.apply(SwiKabinetDo, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec kabinet žaluzija dol stop#####################")
end

rule "Kabinet blind open start"
when
	Item SwiKabinetUp changed to OFF
then
	logInfo("blinds", "###############Kabinet žaluzija gor start#####################")
	executeSwiItem.apply(SwiKabinetUp, COMPLETE, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec kabinet žaluzija gor start#####################")
end

rule "Kabinet blind open stop"
when
	Item SwiKabinetUp changed to ON
then
	logInfo("blinds", "###############Kabinet žaluzija gor stop#####################")
	stopExecuteSwiItem.apply(SwiKabinetUp, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec kabinet žaluzija gor stop#####################")
end

rule "Kabinet logical blind close"
when
	Item ZalKabinetDo changed to ON
then
	logInfo("blinds", "###############Kabinet žaluzije dol#####################")
	val name = getStringFromItem.apply(ZalKabinetDo, 2)
	val peek = blindsPeek.members.filter(item|item.name.containsIgnoreCase(name)).head
	logInfo("blinds", "Peek je nastavljen na - " + peek.toString)
	if (peek.state == OFF){
		executeLogItem.apply(ZalKabinetDo, COMPLETE, timers, activateActBlind, getStringFromItem)
	} else {
		executeLogItem.apply(ZalKabinetDo, PEEK, timers, activateActBlind, getStringFromItem)
	}
	logInfo("blinds", "###############Konec kabinet žaluzija dol#####################")
end

rule "Kabinet logical blind open"
when
	Item ZalKabinetUp changed to ON
then
	logInfo("blinds", "###############Kabinet žaluzija gor#####################")
	val name = getStringFromItem.apply(ZalKabinetUp, 2)
	val peek = blindsPeek.members.filter(item|item.name.containsIgnoreCase(name)).head
	logInfo("blinds", "Peek je nastavljen na - " + peek.toString)
	if (peek.state == OFF){
		executeLogItem.apply(ZalKabinetUp, COMPLETE, timers, activateActBlind, getStringFromItem)
	} else {
		executeLogItem.apply(ZalKabinetUp, PEEK, timers, activateActBlind, getStringFromItem)
	}
	logInfo("blinds", "###############Konec kabinet žaluzija gor#####################")
end

rule "Kabinet logical blind peek"
when
	Item ZalKabinetPeek changed to ON
then
	logInfo("blinds", "###############Kabinet žaluzije premik#####################")
	ZalKabinetUp.sendCommand(ON)
	logInfo("blinds", "###############Konec kabinet žaluzija premik#####################")
end

rule "Kabinet logical blind peek close"
when
	Item ZalKabinetPeekClose changed to ON
then
	logInfo("blinds", "###############Kabinet žaluzije premik#####################")
	ZalKabinetDo.sendCommand(ON)
	logInfo("blinds", "###############Konec kabinet žaluzija premik#####################")
end


//Dnevna desno
rule "Dnevna desno blind close start"
when
	Item SwiDnevnaDesDo changed to OFF
then
	logInfo("blinds", "###############Dnevna desno žaluzije dol start#####################")
	executeSwiItem.apply(SwiDnevnaDesDo, COMPLETE, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec dnevna desno žaluzija dol start#####################")
end

rule "Dnevna desno blind close stop"
when
	Item SwiDnevnaDesDo changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzije dol stop#####################")
	stopExecuteSwiItem.apply(SwiDnevnaDesDo, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec dnevna desno žaluzija dol stop#####################")
end

rule "Dnevna desno blind open start"
when
	Item SwiDnevnaDesUp changed to OFF
then
	logInfo("blinds", "###############Dnevna desno žaluzija gor start#####################")
	executeSwiItem.apply(SwiDnevnaDesUp, COMPLETE, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec dnevna desno žaluzija gor start#####################")
end

rule "Dnevna desno blind open stop"
when
	Item SwiDnevnaDesUp changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzija gor stop#####################")
	stopExecuteSwiItem.apply(SwiDnevnaDesUp, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec dnevna desno žaluzija gor stop#####################")
end

rule "Dnevna desno logical blind close"
when
	Item ZalDnevnaDesDo changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzije dol#####################")
	val name = getStringFromItem.apply(ZalDnevnaDesDo, 2)
	val peek = blindsPeek.members.filter(item|item.name.containsIgnoreCase(name)).head
	logInfo("blinds", "Peek je nastavljen na - " + peek.toString)
	if (peek.state == OFF){
		executeLogItem.apply(ZalDnevnaDesDo, COMPLETE, timers, activateActBlind, getStringFromItem)
	} else {
		executeLogItem.apply(ZalDnevnaDesDo, PEEK, timers, activateActBlind, getStringFromItem)
	}
	logInfo("blinds", "###############Konec Dnevna desno desno žaluzija dol#####################")
end

rule "Dnevna desno logical blind open"
when
	Item ZalDnevnaDesUp changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzija gor#####################")
	val name = getStringFromItem.apply(ZalDnevnaDesUp, 2)
	val peek = blindsPeek.members.filter(item|item.name.containsIgnoreCase(name)).head
	logInfo("blinds", "Peek je nastavljen na - " + peek.toString)
	if (peek.state == OFF){
		executeLogItem.apply(ZalDnevnaDesUp, COMPLETE, timers, activateActBlind, getStringFromItem)
	} else {
		executeLogItem.apply(ZalDnevnaDesUp, PEEK, timers, activateActBlind, getStringFromItem)
	}
	logInfo("blinds", "###############Konec dnevna desno žaluzija gor#####################")
end

rule "Dnevna desno logical blind peek"
when
	Item ZalDnevnaDesPeek changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzije premik#####################")
	ZalDnevnaDesUp.sendCommand(ON)
	logInfo("blinds", "###############Konec Dnevna desno žaluzija premik#####################")
end

rule "Dnevna desno logical blind peek close"
when
	Item ZalDnevnaDesPeekClose changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzija zapri premik#####################")
	ZalDnevnaDesDo.sendCommand(ON)
	logInfo("blinds", "###############Konec dnevna desno žaluzija zapri premik#####################")
end


//Dnevna levo
rule "Dnevna levo blind close start"
when
	Item SwiDnevnaLevDo changed to OFF
then
	logInfo("blinds", "###############Dnevna levo žaluzije dol start#####################")
	executeSwiItem.apply(SwiDnevnaLevDo, COMPLETE, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec dnevna levo žaluzija dol start#####################")
end

rule "Dnevna levo blind close stop"
when
	Item SwiDnevnaLevDo changed to ON
then
	logInfo("blinds", "###############Dnevna levo žaluzije dol stop#####################")
	stopExecuteSwiItem.apply(SwiDnevnaLevDo, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec levo žaluzija dol stop#####################")
end

rule "Dnevna levo blind open start"
when
	Item SwiDnevnaLevUp changed to OFF
then
	logInfo("blinds", "###############Dnevna levo žaluzija gor start#####################")
	executeSwiItem.apply(SwiDnevnaLevUp, COMPLETE, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec dnevna levo žaluzija gor start#####################")
end

rule "Dnevna levo blind open stop"
when
	Item SwiDnevnaLevUp changed to ON
then
	logInfo("blinds", "###############Dnevna levo žaluzija gor stop#####################")
	stopExecuteSwiItem.apply(SwiDnevnaLevUp, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec dnevna levo žaluzija gor stop#####################")
end

rule "Dnevna levo logical blind close"
when
	Item ZalDnevnaLevDo changed to ON
then
	logInfo("blinds", "###############Dnevna levo žaluzije dol#####################")
	val name = getStringFromItem.apply(ZalDnevnaLevDo, 2)
	val peek = blindsPeek.members.filter(item|item.name.containsIgnoreCase(name)).head
	logInfo("blinds", "Peek je nastavljen na - " + peek.toString)
	if (peek.state == OFF){
		executeLogItem.apply(ZalDnevnaLevDo, COMPLETE, timers, activateActBlind, getStringFromItem)
	} else {
		executeLogItem.apply(ZalDnevnaLevDo, PEEK, timers, activateActBlind, getStringFromItem)
	}
	logInfo("blinds", "###############Konec Dnevna levo žaluzija dol#####################")
end

rule "Dnevna levo logical blind open"
when
	Item ZalDnevnaLevUp changed to ON
then
	logInfo("blinds", "###############Dnevna levo žaluzija gor#####################")
	val name = getStringFromItem.apply(ZalDnevnaLevUp, 2)
	val peek = blindsPeek.members.filter(item|item.name.containsIgnoreCase(name)).head
	logInfo("blinds", "Peek je nastavljen na - " + peek.toString)
	if (peek.state == OFF){
		executeLogItem.apply(ZalDnevnaLevUp, COMPLETE, timers, activateActBlind, getStringFromItem)
	} else {
		executeLogItem.apply(ZalDnevnaLevUp, PEEK, timers, activateActBlind, getStringFromItem)
	}
	logInfo("blinds", "###############Konec dnevna levo žaluzija gor#####################")
end

rule "Dnevna levo logical blind peek"
when
	Item ZalDnevnaLevPeek changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzije premik#####################")
	ZalDnevnaLevUp.sendCommand(ON)
	logInfo("blinds", "###############Konec Dnevna levo žaluzija premik#####################")
end

rule "Dnevna levo logical blind peek close"
when
	Item ZalDnevnaLevPeekClose changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzija zapri premik#####################")
	ZalDnevnaLevDo.sendCommand(ON)
	logInfo("blinds", "###############Konec Dnevna levo žaluzija zapri premik#####################")
end


//Spalnica
rule "Spalnica blind close start"
when
	Item SwiSpalnicaLowActDo changed to OFF
then
	logInfo("blinds", "###############Spalnica žaluzije dol start#####################")
	executeSwiItem.apply(SwiSpalnicaLowActDo, COMPLETE, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec Spalnica žaluzija dol start#####################")
end

rule "Spalnica blind close stop"
when
	Item SwiSpalnicaLowActDo changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije dol stop#####################")
	stopExecuteSwiItem.apply(SwiSpalnicaLowActDo, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec Spalnica žaluzija dol stop#####################")
end

rule "Spalnica blind open start"
when
	Item SwiSpalnicaLowActUp changed to OFF
then
	logInfo("blinds", "###############Spalnica žaluzija gor start#####################")
	executeSwiItem.apply(SwiSpalnicaLowActUp, COMPLETE, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec Spalnica žaluzija gor start#####################")
end

rule "Spalnica blind open stop"
when
	Item SwiSpalnicaLowActUp changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzija gor stop#####################")
	stopExecuteSwiItem.apply(SwiSpalnicaLowActUp, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec Spalnica žaluzija gor stop#####################")
end

rule "Spalnica logical blind close"
when
	Item ZalSpalnicaLowActDo changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije dol#####################")
	val name = getStringFromItem.apply(ZalSpalnicaLowActDo, 2)
	val peek = blindsPeek.members.filter(item|item.name.containsIgnoreCase(name)).head
	logInfo("blinds", "Peek je nastavljen na - " + peek.toString)
	if (peek.state == OFF){
		executeLogItem.apply(ZalSpalnicaLowActDo, COMPLETE, timers, activateActBlind, getStringFromItem)
	} else {
		executeLogItem.apply(ZalSpalnicaLowActDo, PEEK, timers, activateActBlind, getStringFromItem)
	}
	logInfo("blinds", "###############Konec Spalnica žaluzija dol#####################")
end

rule "Spalnica logical blind open"
when
	Item ZalSpalnicaLowActUp changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzija gor#####################")
	val name = getStringFromItem.apply(ZalSpalnicaLowActUp, 2)
	val peek = blindsPeek.members.filter(item|item.name.containsIgnoreCase(name)).head
	logInfo("blinds", "Peek je nastavljen na - " + peek.toString)
	if (peek.state == OFF){
		executeLogItem.apply(ZalSpalnicaLowActUp, COMPLETE, timers, activateActBlind, getStringFromItem)
	} else {
		executeLogItem.apply(ZalSpalnicaLowActUp, PEEK, timers, activateActBlind, getStringFromItem)
	}
	logInfo("blinds", "###############Konec Spalnica žaluzija gor#####################")
end

rule "Spalnica logical blind peek"
when
	Item ZalSpalnicaPeek changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije premik#####################")
	executeLogItem.apply(ZalSpalnicaLowActUp, PEEK, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec Spalnica žaluzija premik#####################")
end


//Aljaž
rule "Aljaz blind close start"
when
	Item SwiAljazLowActDo changed to OFF
then
	logInfo("blinds", "###############Aljaž žaluzije dol start#####################")
	executeSwiItem.apply(SwiAljazLowActDo, COMPLETE, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec Aljaž žaluzija dol start#####################")
end

rule "Aljaz blind close stop"
when
	Item SwiAljazLowActDo changed to ON
then
	logInfo("blinds", "###############Aljaž žaluzije dol stop#####################")
	stopExecuteSwiItem.apply(SwiAljazLowActDo, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec Aljaž žaluzija dol stop#####################")
end

rule "Aljaz blind open start"
when
	Item SwiAljazLowActUp changed to OFF
then
	logInfo("blinds", "###############Aljaž žaluzija gor start#####################")
	executeSwiItem.apply(SwiAljazLowActUp, COMPLETE, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec Aljaž žaluzija gor start#####################")
end

rule "Aljaz blind open stop"
when
	Item SwiAljazLowActUp changed to ON
then
	logInfo("blinds", "###############Aljaž žaluzija gor stop#####################")
	stopExecuteSwiItem.apply(SwiAljazLowActUp, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec Aljaž žaluzija gor stop#####################")
end

rule "Aljaz logical blind close"
when
	Item ZalAljazLowActDo changed to ON
then
	logInfo("blinds", "###############Aljaž žaluzije dol#####################")
	val name = getStringFromItem.apply(ZalAljazLowActDo, 2)
	val peek = blindsPeek.members.filter(item|item.name.containsIgnoreCase(name)).head
	logInfo("blinds", "Peek je nastavljen na - " + peek.toString)
	if (peek.state == OFF){
		executeLogItem.apply(ZalAljazLowActDo, COMPLETE, timers, activateActBlind, getStringFromItem)
	} else {
		executeLogItem.apply(ZalAljazLowActDo, PEEK, timers, activateActBlind, getStringFromItem)
	}
	logInfo("blinds", "###############Konec Aljaž žaluzija dol#####################")
end

rule "Aljaz logical blind open"
when
	Item ZalAljazLowActUp changed to ON
then
	logInfo("blinds", "###############Aljaž žaluzija gor#####################")
	val name = getStringFromItem.apply(ZalAljazLowActUp, 2)
	val peek = blindsPeek.members.filter(item|item.name.containsIgnoreCase(name)).head
	logInfo("blinds", "Peek je nastavljen na - " + peek.toString)
	if (peek.state == OFF){
		executeLogItem.apply(ZalAljazLowActUp, COMPLETE, timers, activateActBlind, getStringFromItem)
	} else {
		executeLogItem.apply(ZalAljazLowActUp, PEEK, timers, activateActBlind, getStringFromItem)
	}
	logInfo("blinds", "###############Konec Aljaž žaluzija gor#####################")
end

rule "Aljaz logical blind peek"
when
	Item ZalAljazPeek changed to ON
then
	logInfo("blinds", "###############Aljaž žaluzije premik gor#####################")
	ZalAljazLowActUp.sendCommand(ON)
	logInfo("blinds", "###############Konec Spalnica žaluzija premik gor#####################")
end

rule "Aljaz logical blind peek close"
when
	Item ZalAljazPeekClose changed to ON
then
	logInfo("blinds", "###############Aljaž žaluzije premik dol#####################")
	ZalAljazLowActDo.sendCommand(ON)
	logInfo("blinds", "###############Konec Aljaž žaluzija premik dol#####################")
end


/*  
//Julija
rule "Julija blind close start"
when
	Item SwiJulijaLowActDo changed to OFF
then
	logInfo("blinds", "###############Spalnica žaluzije dol start#####################")
	executeSwiItem.apply(SwiJulijaLowActDo, COMPLETE, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec Spalnica žaluzija dol start#####################")
end

rule "Julija blind close stop"
when
	Item SwiJulijaLowActDo changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije dol stop#####################")
	stopExecuteSwiItem.apply(SwiJulijaLowActDo, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec Spalnica žaluzija dol stop#####################")
end

rule "Julija blind open start"
when
	Item SwiJulijaLowActUp changed to OFF
then
	logInfo("blinds", "###############Spalnica žaluzija gor start#####################")
	executeSwiItem.apply(SwiJulijaLowActUp, COMPLETE, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec Spalnica žaluzija gor start#####################")
end

rule "Julija blind open stop"
when
	Item SwiJulijaLowActUp changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzija gor stop#####################")
	stopExecuteSwiItem.apply(SwiJulijaLowActUp, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec Spalnica žaluzija gor stop#####################")
end

rule "Julija logical blind close"
when
	Item ZalJulijaLowActDo changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije dol#####################")
	executeLogItem.apply(ZalJulijaLowActDo, COMPLETE, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec Spalnica žaluzija dol#####################")
end

rule "Julija logical blind open"
when
	Item ZalJulijaLowActUp changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzija gor#####################")
	executeLogItem.apply(ZalJulijaLowActUp, COMPLETE, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec Spalnica žaluzija gor#####################")
end

rule "Julija logical blind peek"
when
	Item ZalJulijaPeek changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije premik#####################")
	executeLogItem.apply(ZalJulijaLowActUp, PEEK, timers, activateActBlind, getStringFromItem)
	logInfo("blinds", "###############Konec Spalnica žaluzija premik#####################")
end
 
*/