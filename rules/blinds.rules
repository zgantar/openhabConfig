import org.joda.time.*
import org.openhab.core.library.types.*
import org.openhab.core.library.items.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.apache.commons.lang.StringUtils.*
import org.eclipse.xtext.xbase.lib.*
import org.openhab.model.script.actions.*
import java.util.Map

val int PEEK = 1000
val int COMPLETE = 60000
var Map<String, Timer> timers 

val Functions$Function1 getCommand = [ 
	SwitchItem item|
	logInfo("blinds", "Iščemo ukaz " + item.name.substring(item.name.length - 2, item.name.length))
	return item.name.substring(item.name.length - 2, item.name.length)
]

val Functions$Function1 getName = [ 
	SwitchItem item|
	logInfo("blinds", "Iščemo ime " + item.name.substring(3, item.name.length - 2))
	return item.name.substring(3, item.name.length - 2)
]

val Functions$Function1 getNameWithCommand = [ 
	SwitchItem item|
	logInfo("blinds", "Iščemo ime z ukazom " + item.name.substring(3, item.name.length))
	return item.name.substring(3, item.name.length)
]

val Functions$Function1 getNameWithOppositeCommand = [ 
	SwitchItem item|
	logInfo("blinds", "Iščemo nasprotno ime z ukazom")
	if (item.name.substring(item.name.length - 2, item.name.length).toString.equals("Up")) {
		logInfo("blinds", "Iščemo nasprotno ime z ukazom " + item.name.substring(3, item.name.length - 2).concat("Do"))
		return item.name.substring(3, item.name.length - 2).concat("Do")
	} else {
		logInfo("blinds", "Iščemo nasprotno ime z ukazom " + item.name.substring(3, item.name.length - 2).concat("Up"))
		return item.name.substring(3, item.name.length - 2).concat("Up")
	}
]

val Functions$Function5 executeSwiItem = [
	SwitchItem item,
	int timeToBeActive,
	Functions$Function5 activateActBlind,
	Functions$Function1 getNameWithCommand,
	Functions$Function1 getNameWithOppositeCommand|
	
	logInfo("blinds", "################Procesiram ukaz ročnega stikala start - " + item.toString + "################")
	val nameWithOppositeCommand = getNameWithOppositeCommand.apply(item).toString
	logInfo("blinds", "Ime nasprotnega stikala - " + nameWithOppositeCommand)
	var logItem = BlindLog.members.filter(filtItem|filtItem.name.containsIgnoreCase(nameWithOppositeCommand)).head
	logInfo("blinds", "Nasprotno logično stikalo - " + logItem.toString)
	if (logItem.state == ON) {
		logInfo("blinds", "Premik žaluzij zahtevala logika, preklicujem!")
		logItem.sendCommand(OFF)
//		//ali je to res potrebno
//		activateActBlind.apply(logItem, 0, 0)
		logInfo("blinds", "###############Konec preverjanja logičnega stikala, premikam žaluzijo " + item.toString + "#####################")
		activateActBlind.apply(item, 1, COMPLETE, getNameWithCommand, getNameWithOppositeCommand)
	} else {
		logInfo("blinds", "###############Ni zahteve s strani logike, premikam žaluzijo " + item.toString + "#####################")
		activateActBlind.apply(item, 1, timeToBeActive, getNameWithCommand, getNameWithOppositeCommand)
	}
	return true
]

val Functions$Function5 stopExecuteSwiItem = [
	SwitchItem item,
	int timeToBeActive,
	Functions$Function5 activateActBlind,
	Functions$Function1 getNameWithCommand,
	Functions$Function1 getNameWithOppositeCommand|
	
	logInfo("blinds", "################Procesiram konec ukaza ročnega stikala stop - " + item.toString + "################")
	var actItem = BlindAct.members.filter(filtItem|filtItem.name.containsIgnoreCase(getNameWithCommand.apply(item))).head
	logInfo("blinds", "Aktuator je - " + actItem.toString.toUpperCase)
	val boolean lowAct = !actItem.groupNames.filter(group|group.equalsIgnoreCase("BlindRev")).empty
	if (if(!lowAct)actItem.state == ON else actItem.state == OFF) {
		logInfo("blinds", "Aktuator je aktiven, preverjam čas!")
		val lastUpdateTime = actItem.previousState.timestamp.time
		logInfo("blinds", "Preverjam nasprotno fizično stikalo ali je vklopljeno in koliko časa " + actItem.name + " ----- " + lastUpdateTime)
		logInfo("blinds", "V našem času je to " + "----" + actItem.lastUpdate)
		logInfo("blinds", "Trenutni čas " + "----" + now)
		val timeDifference = now.millis - lastUpdateTime
		logInfo("blinds", "Razlika je " + "----" + timeDifference)
		if (timeDifference <= 2000){
			logInfo("blinds", "Premik žaluzij zahtevalo ročno stikalo ob " + (actItem.lastUpdate) + " in bilo je krajše od 2 sekund zato takoj izklopim")
			activateActBlind.apply(item, 0, 0, getNameWithCommand, getNameWithOppositeCommand)
		}
	} else {
		logInfo("blinds", "Aktuator ni aktiven zato ignoriram!")
	}
	return true
]

val Functions$Function5 executeLogItem = [
	SwitchItem item,
	int timeToBeActive,
	Functions$Function5 activateActBlind,
	Functions$Function1 getNameWithCommand,
	Functions$Function1 getNameWithOppositeCommand|

	logInfo("blinds", "################Procesiram ukaz logičnega stikala - " + item.toString + "################")
	val nameWithOppositeCommand = getNameWithOppositeCommand.apply(item).toString
	logInfo("blinds", "Ime nasprotnega stikala - " + nameWithOppositeCommand.toString.toUpperCase)
	var oppSwiItem = BlindSwi.members.filter(filtItem|filtItem.name.containsIgnoreCase(nameWithOppositeCommand)).head
	logInfo("blinds", "Nasprotno fizično stikalo - " + oppSwiItem.toString)
	if (oppSwiItem.state == OFF) {
		val lastUpdateTime = oppSwiItem.previousState.timestamp.time
		logInfo("blinds", "Preverjam nasprotno fizično stikalo ali je vklopljeno in koliko časa " + oppSwiItem.name + " ----- " + lastUpdateTime)
		logInfo("blinds", "V našem času je to " + "----" + oppSwiItem.lastUpdate)
		logInfo("blinds", "Trenutni čas " + "----" + now)
		val timeDifference = now.millis - lastUpdateTime
		logInfo("blinds", "Razlika je " + "----" + timeDifference)
		if (timeDifference > 300000) {
			logInfo("blinds", "Premik žaluzij zahtevalo ročno stikalo pred več kot 5. minutami, očitno pozabili izklopiti zato ignoriram")
			var oppActItem = BlindAct.members.filter(filtItem | filtItem.name.containsIgnoreCase(nameWithOppositeCommand)).head
			logInfo("blinds", "Izklapljam aktuator - " + oppActItem.toString)
			activateActBlind.apply(oppActItem, 0, 0, getName, getNameWithOppositeCommand)
			logInfo("blinds", "Premikam žaluzijo - " + item.toString)
			activateActBlind.apply(item, 1, COMPLETE, getNameWithCommand, getNameWithOppositeCommand)
		} else {
			logInfo("blinds", "Premik žaluzij zahtevalo ročno stikalo manj kot 5 min nazaj, zato ignoriram logični ukaz!")
		}
	} else {
		logInfo("blinds", "Ni zahteve s strani fizičnega stikala, premikam žaluzije!")
		activateActBlind.apply(item, 1, timeToBeActive, getNameWithCommand, getNameWithOppositeCommand)
	}
	return true
]


val Functions$Function5 activateActBlind = [ 
	SwitchItem item,
	int on,
	int timeToBeActive,
	Functions$Function1 getNameWithCommand,
	Functions$Function1 getNameWithOppositeCommand|
	
	logInfo("blinds", "Klic activateActBlind za " + item.toString)
	
	var Timer shutDownTimer = null
//	val lowAct = name.containsIgnoreCase("LowAct")
	val actItem = BlindAct.members.filter(filtItem | filtItem.name.containsIgnoreCase(getNameWithCommand.apply(item).toString)).head
	val boolean lowAct = !actItem.groupNames.filter(group|group.equalsIgnoreCase("BlindRev")).empty
//	actItem.groupNames.forEach[group|
//		logInfo("blinds", "Grupa je  - " + group)
//		if (group.equals("BlindRev")) {
//			lowAct = true
//			logInfo("blinds", "Pa poglejmo če bo zdej delal ")
//		}
//	]
//	
	logInfo("blinds", "Ali smo našli obratno stikalo " + lowAct)
	logInfo("blinds", "Našli aktuator " + actItem.toString)
//	val nameWithOppositeCommand = getNameWithOppositeCommand.apply(item).toString
	var oppActItem = BlindAct.members.filter(filtItem | filtItem.name.containsIgnoreCase(getNameWithOppositeCommand.apply(item).toString)).head
	logInfo("blinds", "Našli nasprotni aktuator " + oppActItem.toString)
//	val stateItem = BlindState.members.filter(filtItem | filtItem.name.containsIgnoreCase(name)).head
//	val stanje = stateItem.state as Number
//	logInfo("blinds", "Stanje žaluzije - " + stanje)
	if (on == 1) {
		if (if (!lowAct)oppActItem.state == ON else oppActItem.state == OFF) {
			logInfo("blinds", "!!!!!!!!!!!!!!!Našel signal na aktuatorju za nasprotno smer " + oppActItem.toString + "!!!!!!!!!!!!!!!!!!!!!!!!")
//			logInfo("blinds", item.name.substring(0, 3))
			if (item.name.substring(0, 3).equalsIgnoreCase("Swi") || item.name.substring(0, 3).equalsIgnoreCase("Act")) {
				logInfo("blinds", "!!!!!!!!!!!!!!!Ukaz za nasprotno smer prišel s stikala zato ga izvedemo!!!!!!!!!!!!!!!!!!!!!!!!")
				if (!lowAct)oppActItem.sendCommand(OFF) else oppActItem.sendCommand(ON) 
				logInfo("blinds", "###############Izvajam posredovani ukaz za žaluzijo " + actItem.toString + "##########################")
				if (!lowAct)actItem.sendCommand(ON) else actItem.sendCommand(OFF) 
				shutDownTimer = createTimer(now.plusMillis(timeToBeActive)) [|
					logInfo("blinds", "###############Končal posredovani ukaz za žaluzijo " + actItem.toString + "##########################")
//					stateItem.postUpdate(timeToBeActive)
//					logInfo("blinds", "Stanje žaluzije - " + stateItem.state as Number)
					if (!lowAct)actItem.sendCommand(OFF) else actItem.sendCommand(ON) 
					if (item.name.substring(0,3).equalsIgnoreCase("Zal")) {
						logInfo("blinds", "Nastavim logično stikalo na OFF")
						item.sendCommand(OFF)
					}
				]
				timers.put(getNameWithCommand.apply(actItem).toString, shutDownTimer)
//				shutDownTimer = null
			} else {
				logInfo("blinds", "!!!!!!!!!!!!!!!Ne bi smel priti do sem!!!!!!!!!!!!!!!!!!!!!!!!")
			}
		} else {
			logInfo("blinds", "###############Izvajam posredovani ukaz za žaluzijo " + actItem.toString + "##########################")
			if (!lowAct)actItem.sendCommand(ON) else actItem.sendCommand(OFF) 
			shutDownTimer = createTimer(now.plusMillis(timeToBeActive)) [|
				logInfo("blinds", "###############Končal posredovani ukaz za žaluzijo " + actItem.toString + "##########################")
//				stateItem.postUpdate(timeToBeActive)
//				logInfo("blinds", "Stanje žaluzije - " + stateItem.state as Number)
				if (!lowAct)actItem.sendCommand(OFF) else actItem.sendCommand(ON)
				if (item.name.substring(0,3).equalsIgnoreCase("Zal")) {
					logInfo("blinds", "Nastavim logično stikalo na OFF")
					item.sendCommand(OFF)
				}
			]
			timers.put(getNameWithCommand.apply(actItem).toString, shutDownTimer)
//			shutDownTimer = null
		}
	} else {
		logInfo("blinds", "###############Končal akcijo na žaluziji " + actItem.name.toUpperCase + "#########################")
//		stateItem.postUpdate(now.millis - actItem.lastUpdate.millis)
//		logInfo("blinds", "Stanje žaluzije - " + stateItem.state as Number)
		if (!lowAct)actItem.sendCommand(OFF) else actItem.sendCommand(ON)
	}
	logInfo("blinds", "Trenutna velikost mape je - " + timers.size)
	return true
]

rule "Set blinds up"
when
	System started
then
	logInfo("blinds", "###############Začetna nastavitev žaluzij#####################")
	Blinds.members.forEach[blindsItem|
		if ((blindsItem.state == 'Uninitialized') || (blindsItem.state == 'Undefined')) {
			logDebug("blinds", "Našel neicializirano stanje za " + blindsItem.toString + "!!!!")
			blindsItem.sendCommand(OFF)
		}
	]
	BlindSwi.members.forEach[ swiItem |
		logInfo("blinds", "Našel fizično stikalo " + swiItem.toString + "!!!!")
		if (swiItem.state == OFF) {
			activateActBlind.apply(swiItem, 1, COMPLETE, getName, getNameWithOppositeCommand)
		} else {
			activateActBlind.apply(swiItem, 0, 0, getName, getNameWithOppositeCommand)
		}
	]
	BlindState.members.forEach[stateItem|
		logInfo("blinds", "Preverjam stanje za - " + stateItem.toString)
		if ((stateItem.state == 'Uninitialized') || (stateItem.state == 'Undefined')) {
			logDebug("blinds", "Našel neicializirano stanje za " + stateItem.toString + "!!!!")
			stateItem.postUpdate(0.0)
		}
	]
	if (timers == null) {
		timers = newHashMap
	}
	logInfo("blinds", "###############Konec začetne nastavitve žaluzij#####################")
end

rule "All blinds open"
when
	Item AllCompleteUp changed to ON
then
	logInfo("blinds", "###############Vse žaluzije gor#####################")
	val collection = BlindAct.members.filter(item|item.name.containsIgnoreCase("Up"))
	logInfo("blinds", "Imamo " + collection.size + " žaluzij")
	collection.forEach[actItem |
		logInfo("blinds", "Sem v zanki za aktuatorjem - " + actItem.toString)
		activateActBlind.apply(actItem, 1, COMPLETE, getName, getNameWithOppositeCommand)
	]
	
	logInfo("blinds", "###############Konec vse žaluzije gor#####################")
	sendCommand(AllCompleteUp, OFF)
end

rule "All blinds close"
when
	Item AllCompleteDo changed to ON
then
	logInfo("blinds", "###############Vse žaluzije dol#####################")
	val collection = BlindAct.members.filter(item|item.name.containsIgnoreCase("Do"))
	collection.forEach[actItem |
		logInfo("blinds", "Sem v zanki za aktuatorjem - " + actItem.toString)
		activateActBlind.apply(actItem, 1, COMPLETE, getName, getNameWithOppositeCommand)
	]
	logInfo("blinds", "###############Konec vse žaluzije dol#####################")
	sendCommand(AllCompleteDo, OFF)
end

rule "All blinds peek"
when
	Item AllPeek changed to ON
then
	logInfo("blinds", "###############Vse žaluzije premakni#####################")
	val collection = BlindAct.members.filter(item|item.name.containsIgnoreCase("Up"))
	logInfo("blinds", "Imamo " + collection.size + " žaluzij")
	collection.forEach[actItem |
		logInfo("blinds", "Sem v zanki za aktuatorjem - " + actItem.toString)
		activateActBlind.apply(actItem, 1, PEEK, getName, getNameWithOppositeCommand)
	]
	
	logInfo("blinds", "###############Konec vse žaluzije premakni#####################")
	sendCommand(AllPeek, OFF)
end

rule "All blinds close peek"
when
	Item AllPeekClose changed to ON
then
	logInfo("blinds", "###############Vse žaluzije zapri#####################")
	val collection = BlindAct.members.filter(item|item.name.containsIgnoreCase("Do"))
	logInfo("blinds", "Imamo " + collection.size + " žaluzij")
	collection.forEach[actItem |
		logInfo("blinds", "Sem v zanki za aktuatorjem - " + actItem.toString)
		activateActBlind.apply(actItem, 1, PEEK, getName, getNameWithOppositeCommand)
	]
	
	logInfo("blinds", "###############Konec vse žaluzije zapri#####################")
	sendCommand(AllPeekClose, OFF)
end

//Kabinet
rule "Kabinet blind close start"
when
	Item SwiKabinetDo changed to OFF
then
	logInfo("blinds", "###############Kabinet žaluzije dol start#####################")
	executeSwiItem.apply(SwiKabinetDo, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec kabinet žaluzija dol start#####################")
end

rule "Kabinet blind close stop"
when
	Item SwiKabinetDo changed to ON
then
	logInfo("blinds", "###############Kabinet žaluzije dol stop#####################")
	stopExecuteSwiItem.apply(SwiKabinetDo, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec kabinet žaluzija dol stop#####################")
end

rule "Kabinet blind open start"
when
	Item SwiKabinetUp changed to OFF
then
	logInfo("blinds", "###############Kabinet žaluzija gor start#####################")
	executeSwiItem.apply(SwiKabinetUp, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec kabinet žaluzija gor start#####################")
end

rule "Kabinet blind open stop"
when
	Item SwiKabinetUp changed to ON
then
	logInfo("blinds", "###############Kabinet žaluzija gor stop#####################")
	stopExecuteSwiItem.apply(SwiKabinetUp, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec kabinet žaluzija gor stop#####################")
end

rule "Kabinet logical blind close"
when
	Item ZalKabinetDo changed to ON
then
	logInfo("blinds", "###############Kabinet žaluzije dol#####################")
	executeLogItem.apply(ZalKabinetDo, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec kabinet žaluzija dol#####################")
end

rule "Kabinet logical blind open"
when
	Item ZalKabinetUp changed to ON
then
	logInfo("blinds", "###############Kabinet žaluzija gor#####################")
	executeLogItem.apply(ZalKabinetUp, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec kabinet žaluzija gor#####################")
end

rule "Kabinet logical blind peek"
when
	Item ZalKabinetPeek changed to ON
then
	logInfo("blinds", "###############Kabinet žaluzije premik#####################")
	executeLogItem.apply(SwiKabinetDo, PEEK, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec kabinet žaluzija premik#####################")
end

//Dnevna desno
rule "Dnevna desno blind close start"
when
	Item SwiDnevnaDesDo changed to OFF
then
	logInfo("blinds", "###############Dnevna desno žaluzije dol start#####################")
	executeSwiItem.apply(SwiDnevnaDesDo, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna desno žaluzija dol start#####################")
end

rule "Dnevna desno blind close stop"
when
	Item SwiDnevnaDesDo changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzije dol stop#####################")
	stopExecuteSwiItem.apply(SwiDnevnaDesDo, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna desno žaluzija dol stop#####################")
end

rule "Dnevna desno blind open start"
when
	Item SwiDnevnaDesUp changed to OFF
then
	logInfo("blinds", "###############Dnevna desno žaluzija gor start#####################")
	executeSwiItem.apply(SwiDnevnaDesUp, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna desno žaluzija gor start#####################")
end

rule "Dnevna desno blind open stop"
when
	Item SwiDnevnaDesUp changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzija gor stop#####################")
	stopExecuteSwiItem.apply(SwiDnevnaDesUp, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna desno žaluzija gor stop#####################")
end

rule "Dnevna desno logical blind close"
when
	Item ZalDnevnaDesDo changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzije dol#####################")
	executeLogItem.apply(ZalDnevnaDesDo, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Dnevna desno desno žaluzija dol#####################")
end

rule "Dnevna desno logical blind open"
when
	Item ZalDnevnaDesUp changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzija gor#####################")
	executeLogItem.apply(ZalDnevnaDesUp, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna desno žaluzija gor#####################")
end

rule "Dnevna desno logical blind peek"
when
	Item ZalDnevnaDesPeek changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzije premik#####################")
	executeLogItem.apply(ZalDnevnaDesPeek, PEEK, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Dnevna desno žaluzija premik#####################")
end

//Dnevna levo
rule "Dnevna levo blind close start"
when
	Item SwiDnevnaLevDo changed to OFF
then
	logInfo("blinds", "###############Dnevna levo žaluzije dol start#####################")
	executeSwiItem.apply(SwiDnevnaLevDo, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna levo žaluzija dol start#####################")
end

rule "Dnevna levo blind close stop"
when
	Item SwiDnevnaLevDo changed to ON
then
	logInfo("blinds", "###############Dnevna levo žaluzije dol stop#####################")
	stopExecuteSwiItem.apply(SwiDnevnaLevDo, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec levo žaluzija dol stop#####################")
end

rule "Dnevna levo blind open start"
when
	Item SwiDnevnaLevUp changed to OFF
then
	logInfo("blinds", "###############Dnevna levo žaluzija gor start#####################")
	executeSwiItem.apply(SwiDnevnaLevUp, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna levo žaluzija gor start#####################")
end

rule "Dnevna levo blind open stop"
when
	Item SwiDnevnaLevUp changed to ON
then
	logInfo("blinds", "###############Dnevna levo žaluzija gor stop#####################")
	stopExecuteSwiItem.apply(SwiDnevnaLevUp, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna levo žaluzija gor stop#####################")
end

rule "Dnevna levo logical blind close"
when
	Item ZalDnevnaLevDo changed to ON
then
	logInfo("blinds", "###############Dnevna levo žaluzije dol#####################")
	executeLogItem.apply(ZalDnevnaLevDo, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Dnevna levo žaluzija dol#####################")
end

rule "Dnevna levo logical blind open"
when
	Item ZalDnevnaLevUp changed to ON
then
	logInfo("blinds", "###############Dnevna levo žaluzija gor#####################")
	executeLogItem.apply(ZalDnevnaLevUp, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna levo žaluzija gor#####################")
end

rule "Dnevna levo logical blind peek"
when
	Item ZalDnevnaLevPeek changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzije premik#####################")
	executeLogItem.apply(ZalDnevnaLevPeek, PEEK, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Dnevna levo žaluzija premik#####################")
end

//Spalnica
rule "Spalnica blind close start"
when
	Item SwiSpalnicaLowActDo changed to OFF
then
	logInfo("blinds", "###############Spalnica žaluzije dol start#####################")
	executeSwiItem.apply(SwiSpalnicaLowActDo, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija dol start#####################")
end

rule "Spalnica blind close stop"
when
	Item SwiSpalnicaLowActDo changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije dol stop#####################")
	stopExecuteSwiItem.apply(SwiSpalnicaLowActDo, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija dol stop#####################")
end

rule "Spalnica blind open start"
when
	Item SwiSpalnicaLowActUp changed to OFF
then
	logInfo("blinds", "###############Spalnica žaluzija gor start#####################")
	executeSwiItem.apply(SwiSpalnicaLowActUp, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija gor start#####################")
end

rule "Spalnica blind open stop"
when
	Item SwiSpalnicaLowActUp changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzija gor stop#####################")
	stopExecuteSwiItem.apply(SwiSpalnicaLowActUp, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija gor stop#####################")
end

rule "Spalnica logical blind close"
when
	Item ZalSpalnicaLowActDo changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije dol#####################")
	executeLogItem.apply(ZalSpalnicaLowActDo, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija dol#####################")
end

rule "Spalnica logical blind open"
when
	Item ZalSpalnicaLowActUp changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzija gor#####################")
	executeLogItem.apply(ZalSpalnicaLowActUp, COMPLETE, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija gor#####################")
end

rule "Spalnica logical blind peek"
when
	Item ZalSpalnicaPeek changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije premik#####################")
	executeLogItem.apply(ZalSpalnicaPeek, PEEK, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija premik#####################")
end