import org.joda.time.*
import org.openhab.core.library.types.*
import org.openhab.core.library.items.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.apache.commons.lang.StringUtils.*
import org.eclipse.xtext.xbase.lib.*
import org.openhab.model.script.actions.*
import java.util.Map

val int PEEK = 1000
val int COMPLETE = 60000
var Map<String, Timer> timers 

val Functions$Function1 getCommand = [ 
	SwitchItem item|
	logInfo("blinds", "Iščemo ukaz " + item.name.substring(item.name.length - 2, item.name.length))
	return item.name.substring(item.name.length - 2, item.name.length)
]

val Functions$Function1 getName = [ 
	SwitchItem item|
	logInfo("blinds", "Iščemo ime " + item.name.substring(3, item.name.length - 2))
	return item.name.substring(3, item.name.length - 2)
]

val Functions$Function1 getNameWithCommand = [ 
	SwitchItem item|
	logInfo("blinds", "Iščemo ime z ukazom " + item.name.substring(3, item.name.length))
	return item.name.substring(3, item.name.length)
]

val Functions$Function1 getNameWithOppositeCommand = [ 
	SwitchItem item|
	logInfo("blinds", "Iščemo nasprotno ime z ukazom")
	if (item.name.substring(item.name.length - 2, item.name.length).toString.equals("Up")) {
		logInfo("blinds", "Iščemo nasprotno ime z ukazom " + item.name.substring(3, item.name.length - 2).concat("Do"))
		return item.name.substring(3, item.name.length - 2).concat("Do")
	} else {
		logInfo("blinds", "Iščemo nasprotno ime z ukazom " + item.name.substring(3, item.name.length - 2).concat("Up"))
		return item.name.substring(3, item.name.length - 2).concat("Up")
	}
]

val Functions$Function5 executeSwiItem = [
	SwitchItem item,
	Functions$Function1 getName,
	Functions$Function6 activateActBlind,
	Functions$Function1 getNameWithCommand,
	Functions$Function1 getNameWithOppositeCommand|
	
	logInfo("blinds", "################Procesiram ukaz ročnega stikala start - " + item.toString + "################")
	val nameWithOppositeCommand = getNameWithOppositeCommand.apply(item).toString
	logInfo("blinds", "Ime nasprotnega stikala - " + nameWithOppositeCommand)
	var logItem = BlindLog.members.filter(filtItem|filtItem.name.containsIgnoreCase(nameWithOppositeCommand)).head
	logInfo("blinds", "Nasprotno logično stikalo - " + logItem.toString)
	if (logItem.state == ON) {
		logInfo("blinds", "Premik žaluzij zahtevala logika, preklicujem!")
		logItem.sendCommand(OFF)
		logInfo("blinds", "###############Konec preverjanja logičnega stikala, premikam žaluzijo " + item.toString + "#####################")
		activateActBlind.apply(item, 1, COMPLETE, getName, getNameWithCommand, getNameWithOppositeCommand)
	} else {
		logInfo("blinds", "###############Ni zahteve s strani logike, premikam žaluzijo " + item.toString + "#####################")
		activateActBlind.apply(item, 1, COMPLETE, getName, getNameWithCommand, getNameWithOppositeCommand)
	}
	return true
]

val Functions$Function5 stopExecuteSwiItem = [
	SwitchItem item,
	Functions$Function1 getName,
	Functions$Function6 activateActBlind,
	Functions$Function1 getNameWithCommand,
	Functions$Function1 getNameWithOppositeCommand|
	
	logInfo("blinds", "################Procesiram konec ukaza ročnega stikala stop - " + item.toString + "################")
	var actItem = BlindAct.members.filter(filtItem|filtItem.name.containsIgnoreCase(getNameWithCommand.apply(item))).head
	logInfo("blinds", "Aktuator je - " + actItem.toString.toUpperCase)
	val boolean lowAct = !actItem.groupNames.filter(group|group.equalsIgnoreCase("BlindRev")).empty
	if (if(!lowAct)actItem.state == ON else actItem.state == OFF) {
		logInfo("blinds", "Aktuator je aktiven, preverjam čas!")
		val lastUpdateTime = actItem.previousState.timestamp.time
		logInfo("blinds", "Preverjam nasprotno fizično stikalo ali je vklopljeno in koliko časa " + actItem.name + " ----- " + lastUpdateTime)
		logInfo("blinds", "V našem času je to " + "----" + actItem.lastUpdate)
		logInfo("blinds", "Trenutni čas " + "----" + now)
		val timeDifference = now.millis - lastUpdateTime
		logInfo("blinds", "Razlika je " + "----" + timeDifference)
		if (timeDifference <= 2000){
			logInfo("blinds", "Premik žaluzij zahtevalo ročno stikalo ob " + (actItem.lastUpdate) + " in bilo je krajše od 2 sekund zato takoj izklopim")
			activateActBlind.apply(item, 0, 0, getName, getNameWithCommand, getNameWithOppositeCommand)
		}
	} else {
		val timer = timers.remove(getNameWithCommand.apply(item).toString)
		logInfo("blinds", "Aktuator ni aktiven zato ignoriram! Preverjam timerje in po potrebi pucam, kar zmanjša mapo na " + timers.size)
		if (timer != null) timer.cancel
	}
	return true
]

val Functions$Function6 executeLogItem = [
	SwitchItem item,
	int timeToBeActive,
	Functions$Function1 getName,
	Functions$Function6 activateActBlind,
	Functions$Function1 getNameWithCommand,
	Functions$Function1 getNameWithOppositeCommand|

	logInfo("blinds", "################Procesiram ukaz logičnega stikala - " + item.toString + "################")
	val nameWithOppositeCommand = getNameWithOppositeCommand.apply(item).toString
	logInfo("blinds", "Ime nasprotnega stikala - " + nameWithOppositeCommand.toString.toUpperCase)
	var oppSwiItem = BlindSwi.members.filter(filtItem|filtItem.name.containsIgnoreCase(nameWithOppositeCommand)).head
	logInfo("blinds", "Nasprotno fizično stikalo - " + oppSwiItem.toString)
	if (oppSwiItem.state == OFF) {
		val lastUpdateTime = oppSwiItem.previousState.timestamp.time
		logInfo("blinds", "Preverjam nasprotno fizično stikalo ali je vklopljeno in koliko časa " + oppSwiItem.name + " ----- " + lastUpdateTime)
		logInfo("blinds", "V našem času je to " + "----" + oppSwiItem.lastUpdate)
		logInfo("blinds", "Trenutni čas " + "----" + now)
		val timeDifference = now.millis - lastUpdateTime
		logInfo("blinds", "Razlika je " + "----" + timeDifference)
		if (timeDifference > 300000) {
			logInfo("blinds", "Premik žaluzij zahtevalo ročno stikalo pred več kot 5. minutami, očitno pozabili izklopiti zato ignoriram in premikam žaluzijo " + item.toString)
			activateActBlind.apply(item, 1, timeToBeActive, getName, getNameWithCommand, getNameWithOppositeCommand)
		} else {
			logInfo("blinds", "Premik žaluzij zahtevalo ročno stikalo manj kot 5 min nazaj, zato ignoriram logični ukaz!")
		}
	} else {
		logInfo("blinds", "Ni zahteve s strani fizičnega stikala, premikam žaluzije!")
		activateActBlind.apply(item, 1, timeToBeActive, getName, getNameWithCommand, getNameWithOppositeCommand)
	}
	return true
]


val Functions$Function6 activateActBlind = [ 
	SwitchItem item,
	int on,
	int timeToBeActive,
	Functions$Function1 getName,
	Functions$Function1 getNameWithCommand,
	Functions$Function1 getNameWithOppositeCommand|
	
	var Timer timer = null
	var Timer shutDownTimer = null
	logInfo("blinds", "Klic activateActBlind za " + item.toString)
	val actItem = BlindAct.members.filter(filtItem | filtItem.name.containsIgnoreCase(getNameWithCommand.apply(item).toString)).head
	val boolean lowAct = !actItem.groupNames.filter(group|group.equalsIgnoreCase("BlindRev")).empty
	val boolean downCommand = actItem.name.substring(item.name.length - 2, item.name.length).equals("Do")
	val String nameWithCommand = getNameWithCommand.apply(actItem).toString
	logInfo("blinds", "Ali smo našli obratno stikalo " + lowAct)
	logInfo("blinds", "Našli aktuator " + actItem.toString)
	var oppActItem = BlindAct.members.filter(filtItem | filtItem.name.containsIgnoreCase(getNameWithOppositeCommand.apply(item).toString)).head
	logInfo("blinds", "Našli nasprotni aktuator " + oppActItem.toString)
	val stateItem = BlindState.members.filter(filtItem | filtItem.name.containsIgnoreCase(getName.apply(item))).head
	val stanje = stateItem.state as Number
	logInfo("blinds", "Stanje žaluzije - " + stanje)
	if (on == 1) {
		if (if (!lowAct)oppActItem.state == ON else oppActItem.state == OFF) {
			logInfo("blinds", "!!!!!!!!!!!!!!!Našel signal na aktuatorju za nasprotno smer " + oppActItem.toString + " Izklapljam!!!!!!!!!!!!!!!!!!!!!!!!")
			//preklicat mormo timer in nastvati pravilno stanje
//			val lastUpdateTime = oppActItem.previousState.timestamp.time
			val lastUpdateTime = oppActItem.lastUpdate.toDate.time
			logInfo("blinds", "Preverjam nasprotni aktuator koliko časa " + oppActItem.name+ " ----- " + lastUpdateTime)
			logInfo("blinds", "V našem času je to " + "----" + oppActItem.lastUpdate)
			logInfo("blinds", "Trenutni čas " + "----" + now)
			if (!lowAct)oppActItem.sendCommand(OFF) else oppActItem.sendCommand(ON)
			val timeDifference = now.millis - lastUpdateTime
			if (downCommand) {
				logInfo("blinds", "Ker je ukaz za spust prekinil ukaz za dvig, moramo stanje povečati za " + timeDifference)
				stateItem.postUpdate(stateItem.state as Number + timeDifference)
			} else {
				logInfo("blinds", "Ker je ukaz za dvig prekinil ukaz za spust, moramo stanje zmanjšati za " + timeDifference)
				stateItem.postUpdate(stateItem.state as Number - timeDifference)
			}
			timer = timers.remove(getNameWithCommand.apply(oppActItem).toString)
			logInfo("blinds", "Ker smo ročno prekinili premik žaluzij prekinjamo timer - " + oppActItem.toString + ", kar zmanjša mapo na " + timers.size)
			if (timer != null) timer.cancel 
			//nadaljujmo
			logInfo("blinds", "###############Izvajam posredovani ukaz za žaluzijo " + actItem.toString + "##########################")
			if (!lowAct)actItem.sendCommand(ON) else actItem.sendCommand(OFF) 
			shutDownTimer = createTimer(now.plusMillis(timeToBeActive)) [|
				logInfo("blinds", "###############Končal posredovani ukaz za žaluzijo " + actItem.toString + "##########################")
				if (!lowAct)actItem.sendCommand(OFF) else actItem.sendCommand(ON) 
				if (downCommand) {
					stateItem.postUpdate(stateItem.state as Number - timeToBeActive)
				} else {
					stateItem.postUpdate(stateItem.state as Number + timeToBeActive)
				}
				logInfo("blinds", "Stanje žaluzije - " + stateItem.state as Number)
				if (item.name.substring(0,3).equalsIgnoreCase("Zal")) {
					logInfo("blinds", "Nastavim logično stikalo na OFF")
					item.sendCommand(OFF)
				}
			]
			timers.put(nameWithCommand, shutDownTimer)
			logInfo("blinds", "Vstavimo nov timer " + nameWithCommand + ", kar poveča mapo na " + timers.size)
		} else {
			logInfo("blinds", "###############Izvajam posredovani ukaz za žaluzijo " + actItem.toString + "##########################")
			if (!lowAct)actItem.sendCommand(ON) else actItem.sendCommand(OFF) 
			shutDownTimer = createTimer(now.plusMillis(timeToBeActive)) [|
				logInfo("blinds", "###############Končal posredovani ukaz za žaluzijo " + actItem.toString + "##########################")
				if (!lowAct)actItem.sendCommand(OFF) else actItem.sendCommand(ON)
				if (downCommand) {
					stateItem.postUpdate(stateItem.state as Number - timeToBeActive)
				} else {
					stateItem.postUpdate(stateItem.state as Number + timeToBeActive)
				}
				logInfo("blinds", "Stanje žaluzije - " + stateItem.state as Number)
				if (item.name.substring(0,3).equalsIgnoreCase("Zal")) {
					logInfo("blinds", "Nastavim logično stikalo na OFF")
					item.sendCommand(OFF)
				}
			]
			timers.put(nameWithCommand, shutDownTimer)
			logInfo("blinds", "Vstavimo nov timer " + nameWithCommand + ", kar poveča mapo na " + timers.size)
		}
	} else {
		logInfo("blinds", "###############Končal akcijo na žaluziji " + actItem.name.toUpperCase + "#########################")
		//preklicat mormo timer in nastvati pravilno stanje
		val lastUpdateTime = actItem.lastUpdate.toDate.time
		logInfo("blinds", "Preverjam nasprotni aktuator koliko časa " + actItem.toString+ " ----- " + lastUpdateTime)
		logInfo("blinds", "V našem času je to " + "----" + actItem.lastUpdate)
		logInfo("blinds", "Trenutni čas " + "----" + now)
		if (!lowAct)actItem.sendCommand(OFF) else actItem.sendCommand(ON)
		val timeDifference = now.millis - lastUpdateTime
		if (timeDifference < 60000) {
			if (downCommand) {
				logInfo("blinds", "Ker je ukaz za spust prekinil ukaz za dvig, moramo stanje povečati za " + timeDifference)
				stateItem.postUpdate(stateItem.state as Number - timeDifference)
			} else {
				logInfo("blinds", "Ker je ukaz za dvig prekinil ukaz za spust, moramo stanje zmanjšati za " + timeDifference)
				stateItem.postUpdate(stateItem.state as Number + timeDifference)
			}
			logInfo("blinds", "Prekinjamo timer, ker smo ročno prekinili premik žaluzij!")
			logInfo("blinds", "Iščemo timer za " + actItem.toString)
			timer = timers.remove(getNameWithCommand.apply(actItem).toString)
			logInfo("blinds", "Ker smo prekinili premik žaluzij prekinjamo timer - " + oppActItem.toString + ", kar zmanjša mapo na " + timers.size)
			if (timer != null) timer.cancel 
		}
		//nadaljujmo
	}
	logInfo("blinds", "Trenutna velikost mape je - " + timers.size)
	return true
]

rule "Set blinds up"
when
	System started
then
	logInfo("blinds", "###############Začetna nastavitev žaluzij#####################")
	Blinds.members.forEach[blindsItem|
		if ((blindsItem.state == 'Uninitialized') || (blindsItem.state == 'Undefined')) {
			logDebug("blinds", "Našel neicializirano stanje za " + blindsItem.toString + "!!!!")
			blindsItem.sendCommand(OFF)
		}
	]
	BlindSwi.members.forEach[ swiItem |
		logInfo("blinds", "Našel fizično stikalo " + swiItem.toString + "!!!!")
		if (swiItem.state == OFF) {
			activateActBlind.apply(swiItem, 1, COMPLETE, getName, getNameWithCommand, getNameWithOppositeCommand)
		} else {
			activateActBlind.apply(swiItem, 0, 0, getName, getNameWithCommand, getNameWithOppositeCommand)
		}
	]
	BlindState.members.forEach[stateItem|
		logInfo("blinds", "Preverjam stanje za - " + stateItem.toString)
		if ((stateItem.state == 'Uninitialized') || (stateItem.state == 'Undefined')) {
			logDebug("blinds", "Našel neicializirano stanje za " + stateItem.toString + "!!!!")
			stateItem.postUpdate(0.0)
		}
	]
	if (timers == null) {
		timers = newHashMap
	}
	logInfo("blinds", "###############Konec začetne nastavitve žaluzij#####################")
end

rule "All blinds open"
when
	Item AllCompleteUp changed to ON
then
	logInfo("blinds", "###############Vse žaluzije gor#####################")
	val collection = BlindAct.members.filter(item|item.name.containsIgnoreCase("Up"))
	logInfo("blinds", "Imamo " + collection.size + " žaluzij")
	collection.forEach[actItem |
		logInfo("blinds", "Sem v zanki za aktuatorjem - " + actItem.toString)
		activateActBlind.apply(actItem, 1, COMPLETE, getName, getNameWithCommand, getNameWithOppositeCommand)
	]
	logInfo("blinds", "###############Konec vse žaluzije gor#####################")
	sendCommand(AllCompleteUp, OFF)
end

rule "All blinds close"
when
	Item AllCompleteDo changed to ON
then
	logInfo("blinds", "###############Vse žaluzije dol#####################")
	val collection = BlindAct.members.filter(item|item.name.containsIgnoreCase("Do"))
	collection.forEach[actItem |
		logInfo("blinds", "Sem v zanki za aktuatorjem - " + actItem.toString)
		activateActBlind.apply(actItem, 1, COMPLETE, getName, getNameWithCommand, getNameWithOppositeCommand)
	]
	logInfo("blinds", "###############Konec vse žaluzije dol#####################")
	sendCommand(AllCompleteDo, OFF)
end

rule "All blinds peek"
when
	Item AllPeek changed to ON
then
	logInfo("blinds", "###############Vse žaluzije premakni#####################")
	val collection = BlindAct.members.filter(item|item.name.containsIgnoreCase("Up"))
	logInfo("blinds", "Imamo " + collection.size + " žaluzij")
	collection.forEach[actItem |
		logInfo("blinds", "Sem v zanki za aktuatorjem - " + actItem.toString)
		activateActBlind.apply(actItem, 1, PEEK, getName, getNameWithCommand, getNameWithOppositeCommand)
	]
	logInfo("blinds", "###############Konec vse žaluzije premakni#####################")
	sendCommand(AllPeek, OFF)
end

rule "All blinds close peek"
when
	Item AllPeekClose changed to ON
then
	logInfo("blinds", "###############Vse žaluzije zapri#####################")
	val collection = BlindAct.members.filter(item|item.name.containsIgnoreCase("Do"))
	logInfo("blinds", "Imamo " + collection.size + " žaluzij")
	collection.forEach[actItem |
		logInfo("blinds", "Sem v zanki za aktuatorjem - " + actItem.toString)
		activateActBlind.apply(actItem, 1, PEEK, getName, getNameWithCommand, getNameWithOppositeCommand)
	]
	logInfo("blinds", "###############Konec vse žaluzije zapri#####################")
	sendCommand(AllPeekClose, OFF)
end

//Kabinet
rule "Kabinet blind close start"
when
	Item SwiKabinetDo changed to OFF
then
	logInfo("blinds", "###############Kabinet žaluzije dol start#####################")
	executeSwiItem.apply(SwiKabinetDo, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec kabinet žaluzija dol start#####################")
end

rule "Kabinet blind close stop"
when
	Item SwiKabinetDo changed to ON
then
	logInfo("blinds", "###############Kabinet žaluzije dol stop#####################")
	stopExecuteSwiItem.apply(SwiKabinetDo, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec kabinet žaluzija dol stop#####################")
end

rule "Kabinet blind open start"
when
	Item SwiKabinetUp changed to OFF
then
	logInfo("blinds", "###############Kabinet žaluzija gor start#####################")
	executeSwiItem.apply(SwiKabinetUp, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec kabinet žaluzija gor start#####################")
end

rule "Kabinet blind open stop"
when
	Item SwiKabinetUp changed to ON
then
	logInfo("blinds", "###############Kabinet žaluzija gor stop#####################")
	stopExecuteSwiItem.apply(SwiKabinetUp, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec kabinet žaluzija gor stop#####################")
end

rule "Kabinet logical blind close"
when
	Item ZalKabinetDo changed to ON
then
	logInfo("blinds", "###############Kabinet žaluzije dol#####################")
	executeLogItem.apply(ZalKabinetDo, COMPLETE, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec kabinet žaluzija dol#####################")
end

rule "Kabinet logical blind open"
when
	Item ZalKabinetUp changed to ON
then
	logInfo("blinds", "###############Kabinet žaluzija gor#####################")
	executeLogItem.apply(ZalKabinetUp, COMPLETE, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec kabinet žaluzija gor#####################")
end

rule "Kabinet logical blind peek"
when
	Item ZalKabinetPeek changed to ON
then
	logInfo("blinds", "###############Kabinet žaluzije premik#####################")
	executeLogItem.apply(ZalKabinetUp, PEEK, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec kabinet žaluzija premik#####################")
end

//Dnevna desno
rule "Dnevna desno blind close start"
when
	Item SwiDnevnaDesDo changed to OFF
then
	logInfo("blinds", "###############Dnevna desno žaluzije dol start#####################")
	executeSwiItem.apply(SwiDnevnaDesDo, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna desno žaluzija dol start#####################")
end

rule "Dnevna desno blind close stop"
when
	Item SwiDnevnaDesDo changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzije dol stop#####################")
	stopExecuteSwiItem.apply(SwiDnevnaDesDo, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna desno žaluzija dol stop#####################")
end

rule "Dnevna desno blind open start"
when
	Item SwiDnevnaDesUp changed to OFF
then
	logInfo("blinds", "###############Dnevna desno žaluzija gor start#####################")
	executeSwiItem.apply(SwiDnevnaDesUp, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna desno žaluzija gor start#####################")
end

rule "Dnevna desno blind open stop"
when
	Item SwiDnevnaDesUp changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzija gor stop#####################")
	stopExecuteSwiItem.apply(SwiDnevnaDesUp, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna desno žaluzija gor stop#####################")
end

rule "Dnevna desno logical blind close"
when
	Item ZalDnevnaDesDo changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzije dol#####################")
	executeLogItem.apply(ZalDnevnaDesDo, COMPLETE, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Dnevna desno desno žaluzija dol#####################")
end

rule "Dnevna desno logical blind open"
when
	Item ZalDnevnaDesUp changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzija gor#####################")
	executeLogItem.apply(ZalDnevnaDesUp, COMPLETE, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna desno žaluzija gor#####################")
end

rule "Dnevna desno logical blind peek"
when
	Item ZalDnevnaDesPeek changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzije premik#####################")
	executeLogItem.apply(ZalDnevnaDesUp, PEEK, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Dnevna desno žaluzija premik#####################")
end

//Dnevna levo
rule "Dnevna levo blind close start"
when
	Item SwiDnevnaLevDo changed to OFF
then
	logInfo("blinds", "###############Dnevna levo žaluzije dol start#####################")
	executeSwiItem.apply(SwiDnevnaLevDo, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna levo žaluzija dol start#####################")
end

rule "Dnevna levo blind close stop"
when
	Item SwiDnevnaLevDo changed to ON
then
	logInfo("blinds", "###############Dnevna levo žaluzije dol stop#####################")
	stopExecuteSwiItem.apply(SwiDnevnaLevDo, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec levo žaluzija dol stop#####################")
end

rule "Dnevna levo blind open start"
when
	Item SwiDnevnaLevUp changed to OFF
then
	logInfo("blinds", "###############Dnevna levo žaluzija gor start#####################")
	executeSwiItem.apply(SwiDnevnaLevUp, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna levo žaluzija gor start#####################")
end

rule "Dnevna levo blind open stop"
when
	Item SwiDnevnaLevUp changed to ON
then
	logInfo("blinds", "###############Dnevna levo žaluzija gor stop#####################")
	stopExecuteSwiItem.apply(SwiDnevnaLevUp, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna levo žaluzija gor stop#####################")
end

rule "Dnevna levo logical blind close"
when
	Item ZalDnevnaLevDo changed to ON
then
	logInfo("blinds", "###############Dnevna levo žaluzije dol#####################")
	executeLogItem.apply(ZalDnevnaLevDo, COMPLETE, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Dnevna levo žaluzija dol#####################")
end

rule "Dnevna levo logical blind open"
when
	Item ZalDnevnaLevUp changed to ON
then
	logInfo("blinds", "###############Dnevna levo žaluzija gor#####################")
	executeLogItem.apply(ZalDnevnaLevUp, COMPLETE, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec dnevna levo žaluzija gor#####################")
end

rule "Dnevna levo logical blind peek"
when
	Item ZalDnevnaLevPeek changed to ON
then
	logInfo("blinds", "###############Dnevna desno žaluzije premik#####################")
	executeLogItem.apply(ZalDnevnaLevUp, PEEK, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Dnevna levo žaluzija premik#####################")
end

//Spalnica
rule "Spalnica blind close start"
when
	Item SwiSpalnicaLowActDo changed to OFF
then
	logInfo("blinds", "###############Spalnica žaluzije dol start#####################")
	executeSwiItem.apply(SwiSpalnicaLowActDo, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija dol start#####################")
end

rule "Spalnica blind close stop"
when
	Item SwiSpalnicaLowActDo changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije dol stop#####################")
	stopExecuteSwiItem.apply(SwiSpalnicaLowActDo, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija dol stop#####################")
end

rule "Spalnica blind open start"
when
	Item SwiSpalnicaLowActUp changed to OFF
then
	logInfo("blinds", "###############Spalnica žaluzija gor start#####################")
	executeSwiItem.apply(SwiSpalnicaLowActUp, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija gor start#####################")
end

rule "Spalnica blind open stop"
when
	Item SwiSpalnicaLowActUp changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzija gor stop#####################")
	stopExecuteSwiItem.apply(SwiSpalnicaLowActUp, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija gor stop#####################")
end

rule "Spalnica logical blind close"
when
	Item ZalSpalnicaLowActDo changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije dol#####################")
	executeLogItem.apply(ZalSpalnicaLowActDo, COMPLETE, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija dol#####################")
end

rule "Spalnica logical blind open"
when
	Item ZalSpalnicaLowActUp changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzija gor#####################")
	executeLogItem.apply(ZalSpalnicaLowActUp, COMPLETE, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija gor#####################")
end

rule "Spalnica logical blind peek"
when
	Item ZalSpalnicaPeek changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije premik#####################")
	executeLogItem.apply(ZalSpalnicaLowActUp, PEEK, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija premik#####################")
end

/*
//Aljaž
rule "Aljaz blind close start"
when
	Item SwiAljazLowActDo changed to OFF
then
	logInfo("blinds", "###############Spalnica žaluzije dol start#####################")
	executeSwiItem.apply(SwiAljazLowActDo, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija dol start#####################")
end

rule "Aljaz blind close stop"
when
	Item SwiAljazLowActDo changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije dol stop#####################")
	stopExecuteSwiItem.apply(SwiAljazLowActDo, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija dol stop#####################")
end

rule "Aljaz blind open start"
when
	Item SwiAljazLowActUp changed to OFF
then
	logInfo("blinds", "###############Spalnica žaluzija gor start#####################")
	executeSwiItem.apply(SwiAljazLowActUp, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija gor start#####################")
end

rule "Aljaz blind open stop"
when
	Item SwiAljazLowActUp changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzija gor stop#####################")
	stopExecuteSwiItem.apply(SwiAljazLowActUp, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija gor stop#####################")
end

rule "Aljaz logical blind close"
when
	Item ZalAljazLowActDo changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije dol#####################")
	executeLogItem.apply(ZalAljazLowActDo, COMPLETE, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija dol#####################")
end

rule "Aljaz logical blind open"
when
	Item ZalAljazLowActUp changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzija gor#####################")
	executeLogItem.apply(ZalAljazLowActUp, COMPLETE, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija gor#####################")
end

rule "Aljaz logical blind peek"
when
	Item ZalAljazPeek changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije premik#####################")
	executeLogItem.apply(ZalAljazLowActUp, PEEK, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija premik#####################")
end
  
//Julija
rule "Julija blind close start"
when
	Item SwiJulijaLowActDo changed to OFF
then
	logInfo("blinds", "###############Spalnica žaluzije dol start#####################")
	executeSwiItem.apply(SwiJulijaLowActDo, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija dol start#####################")
end

rule "Julija blind close stop"
when
	Item SwiJulijaLowActDo changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije dol stop#####################")
	stopExecuteSwiItem.apply(SwiJulijaLowActDo, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija dol stop#####################")
end

rule "Julija blind open start"
when
	Item SwiJulijaLowActUp changed to OFF
then
	logInfo("blinds", "###############Spalnica žaluzija gor start#####################")
	executeSwiItem.apply(SwiJulijaLowActUp, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija gor start#####################")
end

rule "Julija blind open stop"
when
	Item SwiJulijaLowActUp changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzija gor stop#####################")
	stopExecuteSwiItem.apply(SwiJulijaLowActUp, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija gor stop#####################")
end

rule "Julija logical blind close"
when
	Item ZalJulijaLowActDo changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije dol#####################")
	executeLogItem.apply(ZalJulijaLowActDo, COMPLETE, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija dol#####################")
end

rule "Julija logical blind open"
when
	Item ZalJulijaLowActUp changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzija gor#####################")
	executeLogItem.apply(ZalJulijaLowActUp, COMPLETE, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija gor#####################")
end

rule "Julija logical blind peek"
when
	Item ZalJulijaPeek changed to ON
then
	logInfo("blinds", "###############Spalnica žaluzije premik#####################")
	executeLogItem.apply(ZalJulijaLowActUp, PEEK, getName, activateActBlind, getNameWithCommand, getNameWithOppositeCommand)
	logInfo("blinds", "###############Konec Spalnica žaluzija premik#####################")
end
 
*/
*/