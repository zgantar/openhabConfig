import org.joda.time.*
import org.openhab.core.library.types.*
import org.openhab.core.library.items.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.apache.commons.lang.StringUtils.*
import org.eclipse.xtext.xbase.lib.*
import org.openhab.model.script.actions.*

val int PEEK = 1000
val int COMPLETE = 60000

val Functions$Function1 getCommand = [ 
	SwitchItem item|
//	logInfo("blinds", "Iščemo ukaz " + item.name.substring(item.name.length - 2, item.name.length))
	return item.name.substring(item.name.length - 2, item.name.length)
]

val Functions$Function1 getName = [ 
	SwitchItem item|
//	logInfo("blinds", "Iščemo ime " + item.name.substring(3, item.name.length - 2))
	return item.name.substring(3, item.name.length - 2)
]

val Functions$Function1 getNameWithCommand = [ 
	SwitchItem item|
//	logInfo("blinds", "Iščemo ime z ukazom " + item.name.substring(3, item.name.length))
	return item.name.substring(3, item.name.length)
]

val Functions$Function1 getNameWithOppositeCommand = [ 
	SwitchItem item|
//	logInfo("blinds", "Iščemo nasprotno ime z ukazom")
	if (item.name.substring(item.name.length - 2, item.name.length).toString.equals("Up")) {
		logInfo("blinds", "Iščemo nasprotno ime z ukazom " + item.name.substring(3, item.name.length - 2).concat("Do"))
		return item.name.substring(3, item.name.length - 2).concat("Do")
	} else {
		logInfo("blinds", "Iščemo nasprotno ime z ukazom " + item.name.substring(3, item.name.length - 2).concat("Up"))
		return item.name.substring(3, item.name.length - 2).concat("Up")
	}
]

val Functions$Function1 executeSwiItem = [
	SwitchItem item|

	logInfo("blinds", "################Procesiram ukaz ročnega stikala - " + item.toString + "################")
	val actionerName = getName.apply(item).toString
	logInfo("blinds", "Dobil ukaz ročnega stikala - " + actionerName.toString.toUpperCase)
	val actionerCommandName = getCommand.apply(item).toString
	val nameWithOppositeCommand = getNameWithOppositeCommand.apply(item).toString
	logInfo("blinds", "Dobil ukaz - " + actionerCommandName.toString.toUpperCase)
	if (actionerCommandName.equalsIgnoreCase("Do")) {
		logInfo("blinds", "Dobil ukaz za spust žaluzij")
		var logItem = BlindLog.members.filter(filtItem|filtItem.name.containsIgnoreCase(nameWithOppositeCommand)).head
		logInfo("blinds", "Preverjam nasprotno logično stikalo - " + logItem.toString)
		if (logItem.state == ON) {
			logInfo("blinds", "Dvig žaluzij zahtevala logika, preklicujem!")
			logItem.sendCommand(OFF)
			//ali je to res potrebno
			activateActBlind.apply(logItem, 0, 0)
			logInfo("blinds", "###############Konec preverjanja fizičnega stikala, spuščam žaluzijo " + actionerName.toString.toUpperCase + "#####################")
			activateActBlind.apply(item, 1, COMPLETE)
		}
		logInfo("blinds", "Ni zahteve s strani logike!")
		logInfo("blinds", "###############Konec preverjanja fizičnega stikala, spuščam žaluzijo " + actionerName.toString.toUpperCase + "#####################")
		activateActBlind.apply(item, 1, COMPLETE)
	} else {
		logInfo("blinds", "Dobil ukaz za dvig žaluzij")
		var logItem = BlindLog.members.filter(filtItem|filtItem.name.containsIgnoreCase(nameWithOppositeCommand)).head
		logInfo("blinds", "Preverjam nasprotno logično stikalo - " + logItem.toString)
		if (logItem.state == ON) {
			logInfo("blinds", "Spust žaluzij zahtevala logika, preklicujem!")
			logItem.sendCommand(OFF)
			//ali je to res potrebno
			activateActBlind.apply(logItem, 0, 0)
			logInfo("blinds", "###############Konec preverjanja fizičnega stikala, dvigam žaluzijo " + actionerName.toString.toUpperCase + "#####################")
			activateActBlind.apply(item, 1, COMPLETE)
		}
		logInfo("blinds", "Ni zahteve s strani logike!")
		logInfo("blinds", "###############Konec preverjanja fizičnega stikala, dvigam žaluzijo " + actionerName.toString.toUpperCase + "#####################")
		activateActBlind.apply(item, 1, COMPLETE)
	}
	return true
]

val Functions$Function3 activateActBlind = [ 
	SwitchItem item,
	int on,
	int timeToBeActive|
	
	logInfo("blinds", "Klic activateActBlind za " + item.name.toUpperCase)
	var Timer shutDownTimer = null
	val command = item.name.substring(item.name.length - 2, item.name.length)
	val name = item.name.substring(3, item.name.length - 2)
	val lowAct = name.containsIgnoreCase("LowAct")
	logInfo("blinds", "Ali smo našli obratno stikalo " + lowAct)
	val actItem = BlindAct.members.filter(filtItem | filtItem.name.containsIgnoreCase(item.name.substring(3, item.name.length - 1))).head
//	val stateItem = BlindState.members.filter(filtItem | filtItem.name.containsIgnoreCase(name)).head
//	val stanje = stateItem.state as Number
//	logInfo("blinds", "Stanje žaluzije - " + stanje)
	if (on == 1) {
		if (command.equalsIgnoreCase("Up")) {
			logInfo("blinds", "Tretji korak v activateActBlind za " + command.toUpperCase)
			var oppActItem = BlindAct.members.filter(filtItem | filtItem.name.containsIgnoreCase(name.toString.concat("Do"))).head
			logInfo("blinds", "Četrti korak v activateActBlind za " + oppActItem.name)
			if (if (!lowAct)oppActItem.state == ON else oppActItem.state == OFF) {
				logInfo("blinds", "!!!!!!!!!!!!!!!Našel signal na aktuatorju za nasprotno smer " + oppActItem.name.toUpperCase + "!!!!!!!!!!!!!!!!!!!!!!!!")
				if (item.name.substring(0, 2).equalsIgnoreCase("Swi") || item.name.substring(0, 2).equalsIgnoreCase("Act")) {
					logInfo("blinds", "!!!!!!!!!!!!!!!Ukaz za nasprotno smer prišel s stikala zato ga izvedemo!!!!!!!!!!!!!!!!!!!!!!!!")
					logInfo("blinds", "###############Končal akcijo na žaluziji " + actItem.name.toUpperCase + "#########################")
					if (!lowAct)oppActItem.sendCommand(OFF) else oppActItem.sendCommand(ON) 
					logInfo("blinds", "###############Dvigam žaluzijo " + actItem.name.toUpperCase + "##########################")
					if (!lowAct)actItem.sendCommand(ON) else actItem.sendCommand(OFF) 
					shutDownTimer = createTimer(now.plusMillis(timeToBeActive)) [|
						logInfo("blinds", "###############Končal dvig žaluzije " + actItem.name.toUpperCase + "##########################")
//						stateItem.postUpdate(timeToBeActive)
//						logInfo("blinds", "Stanje žaluzije - " + stateItem.state as Number)
						if (!lowAct)actItem.sendCommand(OFF) else actItem.sendCommand(ON) 
						if (item.name.substring(0,2).equalsIgnoreCase("Zal")) {
							item.sendCommand(OFF)
						}
					]
					shutDownTimer = null
				} 
			} else {
				logInfo("blinds", "###############Dvigam žaluzijo " + actItem.name.toUpperCase + "##########################")
				if (!lowAct)actItem.sendCommand(ON) else actItem.sendCommand(OFF) 
				shutDownTimer = createTimer(now.plusMillis(timeToBeActive)) [|
					logInfo("blinds", "###############Končal dvig žaluzije " + actItem.name.toUpperCase + "##########################")
//					stateItem.postUpdate(timeToBeActive)
//					logInfo("blinds", "Stanje žaluzije - " + stateItem.state as Number)
					if (!lowAct)actItem.sendCommand(OFF) else actItem.sendCommand(ON)
					if (item.name.substring(0,2).equalsIgnoreCase("Zal")) {
						item.sendCommand(OFF)
					}
				]
				shutDownTimer = null
			}
		} else {
			logInfo("blinds", "Tretji korak v activateActBlind za " + command.toUpperCase)
			val oppActItem = BlindAct.members.filter(filtItem | filtItem.name.containsIgnoreCase(name.toString.concat("Up"))).head
			if (if (!lowAct)oppActItem.state == ON else oppActItem.state == OFF) {
				logInfo("blinds", "!!!!!!!!!!!!!!!Našel signal na aktuatorju za nasprotno smer " + oppActItem.name.toUpperCase + "!!!!!!!!!!!!!!!!!!!!!!!!!")
				if (item.name.substring(0, 2).equalsIgnoreCase("Swi") || item.name.substring(0, 2).equalsIgnoreCase("Act")) {
					logInfo("blinds", "!!!!!!!!!!!!!!!Ukaz za nasprotno smer prišel s stikala zato ga izvedemo!!!!!!!!!!!!!!!!!!!!!!!!")
					logInfo("blinds", "###############Končal akcijo na žaluziji " + actItem.name.toUpperCase + "#########################")
					if (!lowAct)oppActItem.sendCommand(OFF) else oppActItem.sendCommand(ON)
					logInfo("blinds", "###############Dvigam žaluzijo " + actItem.name.toUpperCase + "##########################")
					if (!lowAct)actItem.sendCommand(ON) else actItem.sendCommand(OFF)
					shutDownTimer = createTimer(now.plusMillis(timeToBeActive)) [|
						logInfo("blinds", "###############Končal dvig žaluzije " + actItem.name.toUpperCase + "##########################")
//						stateItem.postUpdate(timeToBeActive)
//						logInfo("blinds", "Stanje žaluzije - " + stateItem.state as Number)
						if (!lowAct)actItem.sendCommand(OFF) else actItem.sendCommand(ON)
						if (item.name.substring(0,2).equalsIgnoreCase("Zal")) {
							item.sendCommand(OFF)
						}
					]
					shutDownTimer = null
				}
			} else {
				logInfo("blinds", "###############Spuščam žaluzijo " + actItem.name.toUpperCase + "#########################")
				if (!lowAct)actItem.sendCommand(ON) else actItem.sendCommand(OFF)
				shutDownTimer = createTimer(now.plusMillis(timeToBeActive)) [|
					logInfo("blinds", "###############Končal spust žaluzije " + actItem.name.toUpperCase + "##########################")
//					stateItem.postUpdate(timeToBeActive)
//					logInfo("blinds", "Stanje žaluzije - " + stateItem.state as Number)
					if (!lowAct)actItem.sendCommand(OFF) else actItem.sendCommand(ON)
					if (item.name.substring(0,2).equalsIgnoreCase("Zal")) {
						item.sendCommand(OFF)
					}
				]
				shutDownTimer = null
			}
		}
 	} else {
		logInfo("blinds", "###############Končal akcijo na žaluziji " + actItem.name.toUpperCase + "#########################")
//		stateItem.postUpdate(now.millis - actItem.lastUpdate.millis)
//		logInfo("blinds", "Stanje žaluzije - " + stateItem.state as Number)
		if (!lowAct)actItem.sendCommand(OFF) else actItem.sendCommand(ON)
	}
	return true
]

rule "Process command from logic"
when
	Item BlindLog changed
then
	//getting the switch that produced the action
	BlindLog.members.filter(log|log.state == ON).forEach[logItem|
		val actionerName = getName.apply(logItem).toString
		logInfo("blinds", "######################Dobil ukaz logičnega stikala - " + actionerName.toUpperCase + "##########################")
		val actionerCommandName = getCommand.apply(logItem).toString
		val oppActionerName = getNameWithOppositeCommand.apply(logItem)
		val swiItem = BlindSwi.members.filter(filtItem|filtItem.name.containsIgnoreCase(oppActionerName)).head
		logInfo("blinds", "Našel nasprotno fizično stikalo " + swiItem.toString)
		val lastUpdateTime = swiItem.previousState.timestamp.time
		logInfo("blinds", "Preverjam nasprotno fizično stikalo ali je vklopljeno in koliko časa " + swiItem.name + " ----- " + lastUpdateTime)
		logInfo("blinds", "V našem času je to " + "----" + swiItem.lastUpdate)
		logInfo("blinds", "Trenutni čas " + "----" + now)
		val timeDifference = now.millis - lastUpdateTime
		logInfo("blinds", "Razlika je " + "----" + timeDifference)

		if (actionerCommandName.equalsIgnoreCase("Do")) {	
			logInfo("blinds", "Dobil ukaz za spust žaluzij")
			logInfo("blinds", "Preverjam nasprotno fizično stikalo - " + swiItem.toString)
			if (swiItem.state == OFF) {
				logInfo("blinds", "Dvig žaluzij zahtevalo ročno stikalo - preverjam naprej!")
				if (timeDifference > 300000) {
					logInfo("blinds", "Dvig žaluzij zahtevalo ročno stikalo pred več kot 5. minutami, očitno pozabili izklopiti zato ignoriram")
					var oppActItem = BlindAct.members.filter(filtItem | filtItem.name.containsIgnoreCase(oppActionerName)).head
					logInfo("blinds", "Izklapljam aktuator - " + oppActItem.toString)
					activateActBlind.apply(oppActItem, 0, 0)
					logInfo("blinds", "Dvigam žaluzijo - " + swiItem.toString)
					activateActBlind.apply(swiItem, 1, COMPLETE)
				} else {
					logInfo("blinds", "Ročno stikalo je bilo aktivirano manj kot 5 minut nazaj, zato pustimo stat in izklopimo logično stikalo!")
					logItem.sendCommand(OFF)
				}
			} else {
				logInfo("blinds", "Fizično stikalo ni vklopljeno!")
				logInfo("blinds", "###############Konce preverjanja logičnega stikala, spuščam žaluzijo " + actionerName.toUpperCase + "!!!!#####################")
				activateActBlind.apply(logItem, 1, COMPLETE)
			}
		} else {
			logInfo("blinds", "Dobil ukaz za dvig žaluzij")
//			val swiItem = BlindSwi.members.filter(filtItem|filtItem.name.containsIgnoreCase(getNameWithOppositeCommand.apply(logItem))).head
			logInfo("blinds", "Preverjam nasprotno fizično stikalo - " + swiItem.toString)
			if (swiItem.state == OFF) {
				logInfo("blinds", "Spust žaluzij zahtevalo ročno stikalo - preverjam naprej!")
				if (timeDifference > 300000) {
					logInfo("blinds", "Spust žaluzij zahtevalo ročno stikalo pred več kot 5. minutami, očitno pozabili izklopiti zato ignoriram")
					var oppActItem = BlindAct.members.filter(filtItem | filtItem.name.containsIgnoreCase(oppActionerName)).head
					logInfo("blinds", "Izklapljam aktuator - " + oppActItem.toString)
					activateActBlind.apply(oppActItem, 0, 0)
					logInfo("blinds", "Spuščam žaluzijo - " + swiItem.toString)
					activateActBlind.apply(swiItem, 1, COMPLETE)
				} else {
					logInfo("blinds", "Ročno stikalo je bilo aktivirano manj kot 5 minut nazaj, zato pustimo stat in izklopimo logično stikalo!")
					logItem.sendCommand(OFF)
				}
			} else {
				logInfo("blinds", "Fizično stikalo ni vklopljeno!")
				logInfo("blinds", "############### Konce preverjanja logičnega stikala, dvigam žaluzijo " + actionerName.toString.toUpperCase + "!!!!#####################")
				activateActBlind.apply(logItem, 1, COMPLETE)
			}
		}
	]
	//treba preverit, če se je izklopilo stikalo
	BlindAct.members.forEach[actItem |
		val lowAct = getName.apply(actItem).toString.containsIgnoreCase("LowAct")
		val actionerWithCommand = getNameWithCommand.apply(actItem).toString
		if (if(!lowAct)actItem.state == ON else actItem.state == OFF) {
			logInfo("blinds", "Našel aktuator, ki je vklopljen - " + actItem.toString)
			val logItem = BlindLog.members.filter(filter|filter.name.equalsIgnoreCase(actionerWithCommand)).head
			logInfo("blinds", "Preverimo ali je bil prožen z logičnim stikalom - " + logItem.toString)
			if (logItem.state == OFF) {
				logInfo("blinds", "Logično stikalo ni sprožilo žaluzije, preverjamo fizično")
				val swiItem = BlindSwi.members.filter(filter|filter.name.equalsIgnoreCase(actionerWithCommand)).head
				logInfo("blinds", "Preverimo ali je bil prožen s fizičnim stikalom - " + swiItem.toString)
				if (swiItem.state == OFF) {
					logInfo("blinds", "Fizično stikalo je sproženo, pustimo stat")
				} else {
					logInfo("blinds", "Fizično stikalo ni sprožilo žaluzije, ustavimo žaluzijo")
					activateActBlind.apply(actItem, 0, 0)
				}
			} else {
				logInfo("blinds", "Logično stikalo je sproženo, pustimo stat")
			}
		}
	]
end

rule "Process command from switches"
when
	Item BlindSwi changed
then
	//ko bom dodal v bazo bo mrbit delal
//	val swiItem = BlindSwi.members.sortBy[lastUpdate].last as SwitchItem
	logInfo("blinds", "################Dobil ukaz ročnega stikala################")
	//getting the switch that produced the action
	BlindSwi.members.filter(log|log.state == OFF).forEach[swiItem |
//	BlindSwi.members.forEach[swiItem |
		logInfo("blinds", "Našel stikalo - " + swiItem.name)
		val actionerName = getName.apply(swiItem).toString
		logInfo("blinds", "Dobil ukaz ročnega stikala - " + actionerName.toString.toUpperCase)
		val actionerCommandName = getCommand.apply(swiItem).toString
		val nameWithOppositeCommand = getNameWithOppositeCommand.apply(swiItem).toString
		logInfo("blinds", "Dobil ukaz - " + actionerCommandName.toString.toUpperCase)
		if (actionerCommandName.toString.equalsIgnoreCase("Do")) {	
			logInfo("blinds", "Dobil ukaz za spust žaluzij")
			var logItem = BlindLog.members.filter(filtItem|filtItem.name.containsIgnoreCase(nameWithOppositeCommand)).head
			logInfo("blinds", "Preverjam nasprotno logično stikalo - " + logItem.toString)
			if (logItem.state == ON) {
				logInfo("blinds", "Dvig žaluzij zahtevala logika, preklicujem!")
				logItem.sendCommand(OFF)
				//ali je to res potrebno
				activateActBlind.apply(logItem, 0, 0)
				logInfo("blinds", "###############Konce preverjanja fizičnega stikala, spuščam žaluzijo " + actionerName.toString.toUpperCase + "!!!!#####################")
				activateActBlind.apply(swiItem, 1, COMPLETE)
			}
			logInfo("blinds", "Ni zahteve s strani logike!")
			logInfo("blinds", "###############Konce preverjanja fizičnega stikala, spuščam žaluzijo " + actionerName.toString.toUpperCase + "!!!!#####################")
			activateActBlind.apply(swiItem, 1, COMPLETE)
		} else {
			logInfo("blinds", "Dobil ukaz za dvig žaluzij")
			var logItem = BlindLog.members.filter(filtItem|filtItem.name.containsIgnoreCase(nameWithOppositeCommand)).head
			logInfo("blinds", "Preverjam nasprotno logično stikalo - " + logItem.toString)
			if (logItem.state == ON) {
				logInfo("blinds", "Spust žaluzij zahtevala logika, preklicujem!")
				logItem.sendCommand(OFF)
				//ali je to res potrebno
				activateActBlind.apply(logItem, 0, 0)
				logInfo("blinds", "###############Konce preverjanja fizičnega stikala, dvigam žaluzijo " + actionerName.toString.toUpperCase + "!!!!#####################")
				activateActBlind.apply(swiItem, 1, COMPLETE)
			}
			logInfo("blinds", "Ni zahteve s strani logike!")
			logInfo("blinds", "###############Konce preverjanja fizičnega stikala, dvigam žaluzijo " + actionerName.toString.toUpperCase + "!!!!#####################")
			activateActBlind.apply(swiItem, 1, COMPLETE)
			
		}
	]
	//treba preverit, če se je izklopilo stikalo
	BlindAct.members.forEach[actItem |
		val lowAct = getName.apply(actItem).toString.containsIgnoreCase("LowAct")
		val nameWithCommand = getCommand.apply(actItem).toString
		if (if(!lowAct)actItem.state == ON else actItem.state == OFF) {
			logInfo("blinds", "Našel aktuator, ki je vklopljen - " + actItem.name)
			val swiItem = BlindSwi.members.filter(filter|filter.name.containsIgnoreCase(nameWithCommand)).head
			logInfo("blinds", "Preverimo ali je bil prožen s fizičnim stikalom - " + swiItem.toString)
			if (swiItem.state == ON) {
				logInfo("blinds", "Fizično stikalo ni sprožilo žaluzije, preverjamo logično")
				val logItem = BlindLog.members.filter(filter|filter.name.containsIgnoreCase(nameWithCommand)).head
				logInfo("blinds", "Preverimo ali je bil prožen z logičnim stikalom - " + logItem.toString)
				if (logItem.state == ON) {
					logInfo("blinds", "Logično stikalo je sproženo, pustimo stat")
				} else {
					logInfo("blinds", "Logično stikalo ni sprožilo žaluzije")
					logInfo("blinds", "Potrebno preveriti dolžino pritiska fizičnega stikala")
					val lastUpdateTime = swiItem.previousState.timestamp.time
					logInfo("blinds", "Preverjam nasprotno fizično stikalo ali je vklopljeno in koliko časa " + swiItem.name + " ----- " + lastUpdateTime)
					logInfo("blinds", "V našem času je to " + "----" + swiItem.lastUpdate)
					logInfo("blinds", "Trenutni čas " + "----" + now)
					val timeDifference = now.millis - lastUpdateTime
					logInfo("blinds", "Razlika je " + "----" + timeDifference)
					if (timeDifference <= 3000){
						logInfo("blinds", "Premik žaluzij zahtevalo ročno stikalo ob " + (swiItem.lastUpdate) + " in bilo je krajše od 3 sekund zato takoj izklopim")
						activateActBlind.apply(swiItem, 0, 0)
					}
//				activateActBlind.apply(actItem, 0)
				}
			} else {
				logInfo("blinds", "Fizično stikalo je sproženo")
			}
		}
	]
end
 
rule "Set blinds up"
when
	System started
then
	logInfo("blinds", "###############Začetna nastavitev žaluzij#####################")
	Blinds.members.forEach[blindsItem|
		if ((blindsItem.state == 'Uninitialized') || (blindsItem.state == 'Undefined')) {
			logDebug("blinds", "Našel neicializirano stanje za " + blindsItem.toString + "!!!!")
			blindsItem.sendCommand(OFF)
		}
	]
	BlindSwi.members.forEach[ swiItem |
		logInfo("blinds", "Našel fizično stikalo " + swiItem.toString + "!!!!")
		if (swiItem.state == OFF) {
			activateActBlind.apply(swiItem, 1, COMPLETE)
		} else {
			activateActBlind.apply(swiItem, 0, 0)
		}
	]
	BlindState.members.forEach[stateItem|
		logInfo("blinds", "Preverjam stanje za - " + stateItem.toString)
		if ((stateItem.state == 'Uninitialized') || (stateItem.state == 'Undefined')) {
			logDebug("blinds", "Našel neicializirano stanje za " + stateItem.toString + "!!!!")
			stateItem.postUpdate(0.0)
		}
	]
	logInfo("blinds", "###############Konec začetne nastavitve žaluzij#####################")
end

rule "All blinds open"
when
	Item AllCompleteUp changed to ON
then
	logInfo("blinds", "###############Vse žaluzije gor#####################")
	val collection = BlindAct.members.filter(item|item.name.containsIgnoreCase("Up"))
	logInfo("blinds", "Imamo " + collection.size + " žaluzij")
	collection.forEach[actItem |
		logInfo("blinds", "Sem v zanki za aktuatorjem - " + actItem.toString)
		activateActBlind.apply(actItem, 1, COMPLETE)
	]
	
	logInfo("blinds", "###############Konec vse žaluzije gor#####################")
	sendCommand(AllCompleteUp, OFF)
end

rule "All blinds close"
when
	Item AllCompleteDo changed to ON
then
	logInfo("blinds", "###############Vse žaluzije dol#####################")
	val collection = BlindAct.members.filter(item|item.name.containsIgnoreCase("Do"))
	collection.forEach[actItem |
		logInfo("blinds", "Sem v zanki za aktuatorjem - " + actItem.toString)
		activateActBlind.apply(actItem, 1, COMPLETE)
	]
	logInfo("blinds", "###############Konec vse žaluzije dol#####################")
	sendCommand(AllCompleteDo, OFF)
end

rule "All blinds peek"
when
	Item AllPeek changed to ON
then
	logInfo("blinds", "###############Vse žaluzije premakni#####################")
	val collection = BlindAct.members.filter(item|item.name.containsIgnoreCase("Up"))
	logInfo("blinds", "Imamo " + collection.size + " žaluzij")
	collection.forEach[actItem |
		logInfo("blinds", "Sem v zanki za aktuatorjem - " + actItem.toString)
		activateActBlind.apply(actItem, 1, PEEK)
	]
	
	logInfo("blinds", "###############Konec vse žaluzije premakni#####################")
	sendCommand(AllPeek, OFF)
end

rule "All blinds close peek"
when
	Item AllPeekClose changed to ON
then
	logInfo("blinds", "###############Vse žaluzije zapri#####################")
	val collection = BlindAct.members.filter(item|item.name.containsIgnoreCase("Do"))
	logInfo("blinds", "Imamo " + collection.size + " žaluzij")
	collection.forEach[actItem |
		logInfo("blinds", "Sem v zanki za aktuatorjem - " + actItem.toString)
		activateActBlind.apply(actItem, 1, PEEK)
	]
	
	logInfo("blinds", "###############Konec vse žaluzije zapri#####################")
	sendCommand(AllPeekClose, OFF)
end

rule "Kabinet blind close"
when
	Item SwiKabinetDo changed to OFF
then
	logInfo("blinds", "###############Kabinet žaluzije dol#####################")
	executeSwiItem.apply(SwiKabinetDo)
	logInfo("blinds", "###############Konec kabinet žaluzija dol#####################")
end

rule "Kabinet blind open"
when
	Item SwiKabinetUp changed to OFF
then
	logInfo("blinds", "###############Kabinet žaluzija gor#####################")
	executeSwiItem.apply(SwiKabinetUp)
	logInfo("blinds", "###############Konec kabinet žaluzija gor#####################")
end