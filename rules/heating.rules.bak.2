//import org.joda.time
import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*

rule "Set all necessary variables for heating"

when
	System started
then
	sendCommand(LogHeating, OFF)
	logInfo("heating", "Nastavljene zaƒçetne vrednosti - " + LogHeating.state)
end

rule "Heating when ordered"
when
	Item LogHeating changed
then
	if (LogHeating.state == ON || LogHeating.state == Uninitialized) {
		sendCommand(FHHeater, ON)
		logInfo("heating", "Ogrevanje se je vklopilo - " + FHHeater.state)
	}
	else if (LogHeating.state == OFF || LogHeating.state == Uninitialized) {
		sendCommand(FHHeater, OFF)
		logInfo("heating", "Ogrevanje se je izklopilo - " + FHHeater.state)
	}
end

rule "Temperature in bathroom upstairs to low"
when
	Item TempKopalnicaZ received update
then
    var temp = TempKopalnicaZ.state as DecimalType
    var currHeating = LogHeating.getStateAs(LogHeating.acceptedDataTypes.get(0))
    if (temp <= 22 && currHeating == OFF) {
	sendCommand(LogHeating, ON)
	logInfo("heating", "Temperatura v kopalnici zgoraj je prenizka, vklopi ogrevanje - " + LogHeating.state)
    } else if (temp >= 23 && currHeating == ON) {
	sendCommand(LogHeating, OFF)
	logInfo("heating", "Temperatura v kopalnici zgoraj je previsoka, izklopi ogrevanje - " + LogHeating.state)
    }
end

