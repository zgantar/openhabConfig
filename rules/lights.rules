var Timer shutDownTimer = null
var Timer orderDownTimer = null

val Functions$Function1<SwitchItem,Boolean> setShutDownTimer = [ 
	SwitchItem switchItem|
    
    val intTime = 5
    
    if (shutDownTimer === null) {
       shutDownTimer = createTimer(now.plusMinutes(0), [|
           logInfo("lights", "Preverjam ali je prižgana luč nad TVjem")
           if (plugLiDn2Switch2.state == ON) {
               logInfo("lights", "TV luč je prižgana zato prestavim ugašanje za {} minut", intTime)
               shutDownTimer.reschedule(now.plusMinutes(5))
           } else {
               logInfo("lights", "TV luč je ugasnjena zato preverjam gibanje")
               if (gMot.state == OFF){
                   logInfo("lights", "Ker ni več gibanja, preverim kdaj je bilo zadnje gibanje")
                   val lastUpdateMot = gMot.members.filter[tmpMot | tmpMot.lastUpdate !== null].sortBy[lastUpdate].last as SwitchItem
                //    val lastUpdateTimeDiff = now.toInstant().toEpochMilli() - lastUpdateMot.previousState.timestamp.toInstant().toEpochMilli()
                   logInfo("lights", "Zadnje gibanje je bilo zaznano na senzorju {}", lastUpdateMot)
                   if (now.isAfter(lastUpdateMot.lastUpdate.plusMinutes(intTime))) {
                       logInfo("lights", "Ker je bilo zadnje gibanje zaznano več kot {} minut nazaj, ugašam luč na stopnišču", intTime)
                       switchItem.sendCommand(OFF)
                       shutDownTimer = null
                   } else {
                       logInfo("lights", "V zadnjih {} minutah je bilo zaznano gibanje, zato prestavim ugašanje.", intTime)
                       shutDownTimer.reschedule(now.plusMinutes(intTime))
                   }
               } else {
                   logInfo("lights", "Ker še vedno zaznavam gibanje, prestavim preverjanje še za 5 min")
                   shutDownTimer.reschedule(now.plusMinutes(intTime))
               }
           }
       ])
    } else logInfo("lights", "Že imam nastavljen prožilec za ugasnit luči, tako da vse skupaj ignoriram")
	return true
]

val Functions$Function1<SwitchItem,Boolean> checkLastMotion = [ 
	SwitchItem checkTime|
    
    val intCheckTime = 5
    val lastUpdateMot = gMot.members.filter[tmpMot | tmpMot.lastUpdate !== null].sortBy[lastUpdate].last as SwitchItem
    // val lastUpdateTimeDiff = now.toInstant().toEpochMilli() - lastUpdateMot.previousState.timestamp.toInstant().toEpochMilli()
    logInfo("lights", "Zadnje gibanje je bilo zaznano na senzorju {}", lastUpdateMot)
        if (now.isAfter(lastUpdateMot.lastUpdate.plusMinutes(intCheckTime))) {
            logInfo("lights", "Ker je bilo zadnje gibanje zaznano več kot {} minut nazaj, ugašam luč na stopnišču", intCheckTime)
            return true
        } else {
            logInfo("lights", "Ker je bilo zaznano gibanje manj kot {} minut nazaj, zamaknem ugašanje luči.", intCheckTime)
            return false
        }
]


rule "Stairway lights on"
when
    Item gOutSolarRad changed
then
    logInfo("lights", "Sprememba zunanje osvetljenosti na {}", gOutSolarRad.state)
    if (gOutSolarRad.state <= 8) {
        if (plugLiSt2Switch2.state == OFF) {
            if (gOutSolarRad.previousState.state as Number > gOutSolarRad.state as Number) {
                plugLiSt2Switch2.sendCommand(ON)
                logInfo("lights", "Prižigam luči")
                // if (now.getHour >= 20) {
                //     logInfo("lights", "Nastavim timer za spust žaluzij")
                //     orderDownTimer = createTimer(now.plusMinutes(60), [|
                //         logInfo("lights", "Timer sproži spust žaluzij")
                //         AllCompleteDo.sendCommand(ON)
                //         orderDownTimer = null
                //     ])
                // }
            }   
        }
    } else {
        if (plugLiSt2Switch2.state == ON) {
            plugLiSt2Switch2.sendCommand(OFF)
            logInfo("lights", "Ugašam luči")
        }
    }
    logInfo("lights", "Končal preverjanje luči na stopnišču")
end

rule "Stairway light on when movement"
when
    Member of gMot changed to ON
then
    if (ignoreMovementForLights.state == OFF) {
        if (gOutSolarRad.state <= 8) {
            logInfo("lights", "Zaznal gibanje ob {} zato preverim ali prižgati luči na stopnicah, prvo stanje stikala {} in še zunanje osvetlitve {}",
                now.getHour, plugLiSt2Switch2.state, gOutSolarRad.state)
            if (plugLiSt2Switch2.state == OFF) {
                logInfo("lights", "Stanje luči je {} zato prižigam luč", plugLiSt2Switch2.state)
                plugLiSt2Switch2.sendCommand(ON)
                if (now.getHour < 6 || now.getHour == 23) {
                    logInfo("lights", "Ker je nočni čas nastavim ugašanje čez 5 minut.")
                    shutDownTimer = createTimer(now.plusMinutes(5), [|
                        if (gMot.state == OFF) {
                            logInfo("lights", "Ker trenutno ni gibanja, preverim kdaj je bilo zadnje gibanje")
                            val lastUpdateMot = gMot.members.filter[tmpMot | tmpMot.lastUpdate !== null].sortBy[lastUpdate].last as SwitchItem
                            // val lastUpdateTimeDiff = now.toInstant().toEpochMilli() - lastUpdateMot.previousState.timestamp.toInstant().toEpochMilli()
                            logInfo("lights", "Zadnje gibanje je bilo zaznano na senzorju {}", lastUpdateMot)
                            if (now.isAfter(lastUpdateMot.lastUpdate.plusMinutes(5))) {
                                logInfo("lights", "Ker je bilo zadnje gibanje zaznano več kot {} minut nazaj, ugašam luč na stopnišču", 5)
                                plugLiSt2Switch2.sendCommand(OFF)
                                shutDownTimer = null
                            } else {
                                logInfo("lights", "V zadnjih {} minutah je bilo zaznano gibanje, zato prestavim ugašanje.", 5)
                                shutDownTimer.reschedule(now.plusMinutes(5))
                            }
                        } else {
                            logInfo("lights", "Ker še vedno zaznavam gibanje, prestavim preverjanje še za 5 min")
                            shutDownTimer.reschedule(now.plusMinutes(5))
                        }
                    ])
                } else logInfo("lights", "Ker je že jutro, ne nastavim ugašanja čez 5 min.")
            } else logInfo("lights", "Ker ni nočni čas, ne nastavim ugašanja čez 5 min.")
        }
    } else {
        logInfo("lights", "Ker je nastavljeno ignoriranje gibanja, ignoriram gibanje!!!")
    }
end

rule "Stairway light off if no movement"
when
    Time cron "0 0 23 * * ? *"
then
    logInfo("lights", "Ura je enajst in preverjam ali lahko ugasnem luči na stopnišču")
    val lastUpdateMot = gMot.members.filter[tmpMot | tmpMot.lastUpdate !== null].sortBy[lastUpdate].last as SwitchItem
    // val lastUpdateTimeDiff = now.toInstant().toEpochMilli() - lastUpdateMot.previousState.timestamp.toInstant().toEpochMilli()
    logInfo("lights", "Zadnje gibanje je bilo zaznano na senzorju {}.", lastUpdateMot)
 
    if (plugLiDn2Switch2.state == OFF && (now.isAfter(lastUpdateMot.lastUpdate.plusMinutes(5)))) {
        logInfo("lights", "Ker je bilo zadnje gibanje zaznano več kot {} minut nazaj in ker TV luč ni prižgana, ugašam luč na stopnišču", 5)
        plugLiSt2Switch2.sendCommand(OFF)
    } else {
        shutDownTimer = createTimer(now.plusMinutes(5), [|
            logInfo("lights", "Preverjam ali je prižgan TV")
            if (plugTVPower.state as Number > 100) {
                logInfo("lights", "TV je prižgan zato prestavim ugašanje za {} minut", 5)
                shutDownTimer.reschedule(now.plusMinutes(5))
            } else {
                logInfo("lights", "TV luč je ugasnjena zato preverjam gibanje")
                if (gMot.state == OFF){
                    logInfo("lights", "Ker ni več gibanja, preverim kdaj je bilo zadnje gibanje")
                    val timerLastUpdateMot = gMot.members.filter[lastUpdate !== null].sortBy[lastUpdate].last as SwitchItem
                    val timerLastUpdateTimeDiff = now.toInstant().toEpochMilli() - timerLastUpdateMot.previousState.timestamp.toInstant().toEpochMilli()
                    logInfo("lights", "Zadnje gibanje je bilo zaznano na senzorju {} {} millisekund nazaj", timerLastUpdateMot, timerLastUpdateTimeDiff)
                    if (now.isAfter(timerLastUpdateMot.lastUpdate.plusMinutes(5))) {
                       logInfo("lights", "Ker je bilo zadnje gibanje zaznano več kot {} minut nazaj, ugašam luč na stopnišču", 5)
                       plugLiSt2Switch2.sendCommand(OFF)
                       shutDownTimer = null
                   } else {
                       logInfo("lights", "V zadnjih {} minutah je bilo zaznano gibanje, zato prestavim ugašanje.", 5)
                       shutDownTimer.reschedule(now.plusMinutes(5))
                   }
               } else {
                   logInfo("lights", "Ker še vedno zaznavam gibanje, prestavim preverjanje še za 5 min")
                   shutDownTimer.reschedule(now.plusMinutes(5))
               }
           }
       ])
    }
end