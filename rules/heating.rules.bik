import org.joda.time
import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import org.apache.commons.lang.StringUtils.*

var int bool = 0

rule "Set all necessary variables for heating"
when
	System started
then
	sendCommand(Heating, OFF)
	sendCommand(LowElectricity, OFF)
	Log.sendCommand(OFF)
//	Mot.sendCommand(CLOSED)
	Fhh.sendCommand(OFF)
	//setting up desired values for rooms
	Set.members.forEach[ item |
		if ((item.state == Uninitialized) || (item.state == Undefined)) item.postUpdate(20.0)
	]
	logInfo("heating", "Nastavljene začetne vrednosti!")
end

rule "Heating when ordered"
when
	Item Heating changed
then
	if (Heating.state == ON) {
		sendCommand(FHSHeater, ON)
		logInfo("heating", "Ogrevanje se je vklopilo - " + FHSHeater.state)
	}
	else if (Heating.state == OFF) {
		sendCommand(FHSHeater, OFF)
		logInfo("heating", "Ogrevanje se je izklopilo - " + FHSHeater.state)
	}
end

//checking to see if any of the rooms needs heating
rule "Checking if one of the rooms needs heating"
when
	Time cron "0 */5 * * * ?"
then
	Temp.members.forEach[ item |
		val name = item.name.substring(4)
		var tmpItem = Set.members.filter(setter | setter.name.containsIgnoreCase(name)).head
		logInfo("heating", "Preverjamo ali je potrebno ogreti - " + tmpItem.name)
		var tmpItem2 = Log.members.filter( doer | doer.name.containsIgnoreCase(name)).head
		if ((item.previousState.state as DecimalType) <= (tmpItem.state as DecimalType)) {
			logInfo("heating", "temperatura je prenizka, stikalo " + tmpItem2.name + " - " + tmpItem2.state)
			if (tmpItem2.state == OFF) {
				tmpItem2.sendCommand(ON)
				logInfo("heating", "Izdan ukaz za ogrevanje sobe - " + name)
			}
		} else {
			logInfo("heating", "temperatura je previsoka, stikalo " + tmpItem2.name + " - " + tmpItem2.state)
			if (tmpItem2.state == ON) {
				tmpItem2.sendCommand(OFF)
				logInfo("heating", "Izdan ukaz za konec ogrevanja sobe - " + name)
			} 
		}
	]
end

rule "heating of a room was requested"
when
	Item Log changed
then
	bool = 0
	Log.members.forEach[ item |
		val name = item.name.substring(3)
		if (item.state == ON) {
			logInfo("heating", "Našel ventil za odpret - " + item.name + " - " + item.state.toString)
			bool = bool + 1
			val itemList = Fhh.members.filter( floor | floor.name.containsIgnoreCase(name))
			itemList.forEach[ tmpItem |
				if (tmpItem.state == OFF) {
					logInfo("heating", "Odprl ventil  - " + tmpItem.name + " - " + tmpItem.state.toString)
					tmpItem.sendCommand(ON)
				}
			]
		}
	]
	if ((bool > 0) && (Heating.state == OFF)) {
		logInfo("heating", "Poslal ukaz za ogrevanje")
		sendCommand(Heating, ON)
	} else if (bool == 0 && Heating.state == ON) {
		logInfo("heating", "Poslal ukaz za konec ogrevanja")
		sendCommand(Heating, OFF)
	}
end