import org.openhab.model.script.actions.*
import org.eclipse.xtext.xbase.lib.*

var Timer messageCarousel
var Number messageIndex
val String log = "messages"

val Functions$Function1<SwitchItem, Boolean> assignMessage = [ 
	SwitchItem activeMessageSwitch|

    logInfo(log, "-----------------Klic funkcije assignMessage--------------")
    val String name = activeMessageSwitch.name.substring(6, activeMessageSwitch.name.length)
    logInfo(log, "Prvo sporočilo je iz {}", name)
    val activeMessage = Messages.members.filter(filtItem|filtItem.name.equalsIgnoreCase(name)).head
    logInfo(log, "Dobil sem sporočilo {}, ki ga moram prikazati", name)
    Message.postUpdate(activeMessage.state)
    logInfo(log, "-----------------Konec funkcije assignMessage--------------")
    return true
]

rule "Set all necessary variables for messages"
when
	System started
then
    logInfo(log, "Nastavim vse potrebno za sporočanje")
    Message.postUpdate(transform("MAP", "messages.map", "no_messages"))
    MessageNumber.postUpdate(0)
    MessagesNumber.postUpdate(0)
    MessagesSwitches.sendCommand(OFF)
end

rule "Changing the message when one is there"
when
	Item MessagesSwitches changed
then
    logInfo(log, "################Klic Changing the message when one is there##################")
    messageCarousel = null
    messageIndex = 0
    val activeMessages = MessagesSwitches.members.filter(filtItem|filtItem.state == ON)
    if (activeMessages.size > 0) {
        MessagesNumber.postUpdate(activeMessages.size)
        logInfo(log, "Dobil sem {} sporočil", MessagesNumber.state)
        val tmpSwitch = activeMessages.get(messageIndex.intValue) as SwitchItem
        logInfo(log, "Prvi vir sporočila je {}", tmpSwitch.toString)
        assignMessage.apply(tmpSwitch)
        logInfo(log, "Prvi vir sporočila je {}", tmpSwitch.toString)
        messageCarousel = createTimer(now.plusSeconds(7)) [
            logInfo(log, "Sem v timerju z indexom {}", messageIndex)
            if (messageIndex == MessageNumber.state as Number) messageIndex = 0
            else messageIndex = messageIndex + 1    
            assignMessage.apply(activeMessages.get(messageIndex.intValue) as SwitchItem)
            messageCarousel.reschedule(now.plusSeconds(7))
            logInfo(log, "Ponastavljam timer", messageIndex)
        ]
    } else logInfo(log, "Ni sporočil!")
    logInfo(log, "################Konec Changing the message when one is there##################")
end

rule "Changing the message when none is there"
when
	Item Messages received command OFF
then
    logInfo(log, "################Klic Changing the message when none is there##################")
    messageCarousel = null
    messageIndex = 0
    val activeMessages = MessagesSwitches.members.filter(filtItem|filtItem.state == ON)
    MessageNumber.postUpdate(activeMessages.size)
    logInfo(log, "Dobil sem {} sporočil", MessageNumber.state as Number)
    assignMessage.apply(activeMessages.get(messageIndex) as SwitchItem)
    messageCarousel = createTimer(now.plusSeconds(7)) [
        logInfo(log, "Sem v timerju z indexom {}", messageIndex)
	    if (messageIndex == MessageNumber.state as Number) messageIndex = 0
    	else messageIndex = messageIndex + 1    
        assignMessage.apply(activeMessages.get(messageIndex.intValue) as SwitchItem)
        messageCarousel.reschedule(now.plusSeconds(7))
    ]
end

