//import org.joda.time
var Timer alarmBlinkTimer = null
var Timer lightShuttOff = null
var Timer LightBlinker = null
var boolean blinkLightState = false

rule "Set all necessary variables for alarm"

when
	System started
then
	logInfo("alarm", "###########################Set all necessary variables for alarm##############################")
	logInfo("alarm", "AlarmLightRaised - " + AlarmLightRaised.state)
	if (DoorDvigStatus.state == OPEN || DoorNagibStatus == OPEN || DoorVhodStatus == OPEN) {
			logInfo("alarm", "Vsaj ena vrata so odprta zato nastavim AlarmBlinkLight")
			AlarmLightRaised.sendCommand(ON)
	} else sendCommand(AlarmLightRaised, OFF)
	logInfo("alarm", "END ###########################Set all necessary variables for alarm##############################")
end

rule "Turning on light"

when
	Item AlarmLightRaised changed
then
	logInfo("alarm", "###########################Turning " + AlarmLightRaised.state + " light##############################")
	if (AlarmLightRaised.state == ON) {
		logInfo("alarm", "Dobil obvestilo za prižgati luč - " + AlarmLightRaised.state)
		sendCommand(GatewayColor, new HSBType("0,100,100"))
		sendCommand(GatewayBrightness, 20.0)
	} else {
		logInfo("alarm", "Dobil obvestilo za ugasniti luč - " + AlarmLightRaised.state)
		sendCommand(GatewayBrightness, 0)
	}
	logInfo("alarm", "END ###########################Turning " + AlarmLightRaised.state + " light##############################")
end


rule "Door sensors group value changed"

when
	Member of Door changed to OPEN
then
	logInfo("alarm", "###########################Door sensors group value changed##############################")
	logInfo("alarm", "Zaznal sem odprta vrata, preverjam ali že gori luč!! - " + AlarmLightRaised.state.toString)
	val door = triggeringItem
	logInfo("alarm", "Preverjam katera vrata so se odprla - " + door.toString)
	if (AlarmLightRaised.state == OFF) {
		AlarmLightRaised.sendCommand(ON)
		//checking to see if no parent is at home
		if (PhonePing.state == OFF) {
			logInfo("alarm", "Telefona staršev še nista prijavljena na Wifi, počakam še 10 sekund")
			lightShuttOff = createTimer(now.plusMillis(10000)) [|
				if (PhonePing.state == OFF) {
					logInfo("alarm", "Tudi po desetih sekundah ni prijavljenih telefonov, prožim sporočilo")
					sendHABotNotification("Zaznal odprta vrata, ko staršev ni doma ob "+ now + " - " + PhonePing.toString)
				}
				lightShuttOff = null
			]
		}
	}
	logInfo("alarm", "END ###########################Door sensors group value changed##############################")
end

rule "Door sensors group value changed to close"

when
	Item Door changed to CLOSED
then
	logInfo("alarm", "###########################Door sensors group value changed to close##############################")
	logInfo("alarm", "Zaznal sem zapiranje vrat, preverjam če so katera vrata ostala odprta!!" + DoorDvigStatus.state.toString + DoorNagibStatus.state.toString + DoorVhodStatus.state.toString)
	if (AlarmLightRaised.state == ON) {
		AlarmLightRaised.sendCommand(OFF)
	}
logInfo("alarm", "END ###########################Door sensors group value changed to close##############################")
end

rule "Blink alarm light"
when
	Item AlarmBlinkLightRaised changed
then
	logInfo("alarm", "##################Blink Alarm Light########################")
	if (alarmBlinkTimer !== null) {
		logInfo("alarm", "Timer ni null in zato brišem stari objekt - {}", alarmBlinkTimer.toString)
		alarmBlinkTimer.cancel
		alarmBlinkTimer = null
	}
	if (AlarmBlinkLightRaised.state == ON) {
		logInfo("alarm", "Ker je stikalo za utripajoči alarm priklopljeno, začnem utripati!")
		alarmBlinkTimer = createTimer(now.plusMillis(500)) [|
			if (blinkLightState) {
				GatewayColor.sendCommand(new HSBType("0,100,100"))
				GatewayBrightness.sendCommand(100)
				blinkLightState = false
			} else {
				GatewayBrightness.sendCommand(0)
				blinkLightState = true
			}
    	    alarmBlinkTimer.reschedule(now.plusMillis(500))
    	]
	} else {
		GatewayBrightness.sendCommand(0)
	}
end