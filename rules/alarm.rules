//import org.joda.time
var Timer alarmBlinkTimer = null
var Timer lightShuttOff = null
var Timer LightBlinker = null
var boolean blinkLightState = false

rule "Set all necessary variables for alarm"

when
	System started
then
	logInfo("alarm", "###########################Set all necessary variables for alarm##############################")
	logInfo("alarm", "AlarmLightRaised - " + AlarmLightRaised.state)
	if (gKitchenRaiseWindowContact.state == OPEN || gLivingRoomTiltWindowContact == OPEN || gGroundCorridorFrontDoorContact == OPEN) {
			logInfo("alarm", "Vsaj ena vrata so odprta zato nastavim AlarmBlinkLight")
			AlarmLightRaised.sendCommand(ON)
	} else sendCommand(AlarmLightRaised, OFF)
	logInfo("alarm", "END ###########################Set all necessary variables for alarm##############################")
end

rule "Turning on light"

when
	Item AlarmLightRaised changed
then
	logInfo("alarm", "###########################Turning " + AlarmLightRaised.state + " light##############################")
	if (AlarmLightRaised.state == ON) {
		logInfo("alarm", "Dobil obvestilo za prižgati luč - " + AlarmLightRaised.state)
		sendCommand(xiaomiMiGatewayColor, new HSBType("0,100,100"))
		sendCommand(xiaomiMiGatewayBrightness, 20.0)
	} else {
		logInfo("alarm", "Dobil obvestilo za ugasniti luč - " + AlarmLightRaised.state)
		sendCommand(xiaomiMiGatewayBrightness, 0)
	}
	logInfo("alarm", "END ###########################Turning " + AlarmLightRaised.state + " light##############################")
end


rule "Door sensors group value changed"

when
	Member of gDoor changed to ON
then
	logInfo("alarm", "###########################Door sensors group value changed##############################")
	logInfo("alarm", "Zaznal sem odprta vrata, preverjam ali že gori luč!! - " + AlarmLightRaised.state.toString)
	val door = triggeringItem
	logInfo("alarm", "Preverjam katera vrata so se odprla - " + door.toString)
	if (AlarmLightRaised.state == OFF) {
		AlarmLightRaised.sendCommand(ON)
		//checking to see if no parent is at home
		if (gPhonePing.state == OFF) {
			logInfo("alarm", "Telefona staršev še nista prijavljena na Wifi, počakam še 10 sekund")
			lightShuttOff = createTimer(now.plusSeconds(10)) [|
				if (gPhonePing.state == OFF) {
					logInfo("alarm", "Tudi po desetih sekundah ni prijavljenih telefonov, prožim sporočilo")
					sendHABotNotification("Zaznal odprta vrata, ko staršev ni doma ob "+ now + " - " + gPhonePing.toString)
				}
				lightShuttOff = null
			]
		}
	}
	logInfo("alarm", "END ###########################Door sensors group value changed##############################")
end

rule "Door sensors group value changed to close"

when
	Item gDoor changed to OFF
then
	logInfo("alarm", "###########################Door sensors group value changed to close##############################")
	logInfo("alarm", "Zaznal sem zapiranje vrat, preverjam če so katera vrata ostala odprta!!" + gKitchenRaiseWindowContact + gLivingRoomTiltWindowContact + gGroundCorridorFrontDoorContact)
	if (AlarmLightRaised.state == ON) {
		AlarmLightRaised.sendCommand(OFF)
	}
logInfo("alarm", "END ###########################Door sensors group value changed to close##############################")
end

rule "Blink alarm light"
when
	Item AlarmBlinkLightRaised changed
then
	logInfo("alarm", "##################Blink Alarm Light########################")
	if (alarmBlinkTimer !== null) {
		logInfo("alarm", "Timer ni null in zato brišem stari objekt - {}", alarmBlinkTimer.toString)
		alarmBlinkTimer.cancel
		alarmBlinkTimer = null
	}
	if (AlarmBlinkLightRaised.state == ON) {
		logInfo("alarm", "Ker je stikalo za utripajoči alarm priklopljeno, začnem utripati!")
		alarmBlinkTimer = createTimer(now.plusSeconds(1)) [|
			if (blinkLightState) {
				xiaomiMiGatewayColor.sendCommand(new HSBType("0,100,100"))
				xiaomiMiGatewayBrightness.sendCommand(100)
				blinkLightState = false
			} else {
				xiaomiMiGatewayBrightness.sendCommand(0)
				blinkLightState = true
			}
    	    alarmBlinkTimer.reschedule(now.plusSeconds(1))
    	]
	} else {
		xiaomiMiGatewayBrightness.sendCommand(0)
	}
end

// rule "gKitchenRaiseWindowContact changed to ON"

// when
//     Item gRaiseWindowContact changed to ON
// then
//     logInfo("doors", "###########################Terace Door opened##############################")
// 	if (AlarmLightRaised.state == OFF) {
// 		AlarmLightRaised.sendCommand(ON)
// 	}
// end

// rule "gKitchenRaiseWindowContact changed to OFF"

// when
//     Item gRaiseWindowContact changed to OFF
// then
//     logInfo("doors", "########################### Terace Door closed ##############################")
// 	if (AlarmLightRaised.state == ON) {
// 		AlarmLightRaised.sendCommand(OFF)
// 	}
// end


// rule "Start blinking if movement first on groundfloor"
// when
    // Member of GroundF changed to ON
// then
	// val lastUpdateGroundF = gGroundF.members.sortBy[lastUpdate].last as SwitchItem
	// val lastUpdateFirstF = gFirstF.members.sortBy[lastUpdate].last as SwitchItem
	// val lastUpdateTimeDiffGroundF = now.millis - lastUpdateGroundF.previousState.timestamp.time
	// val lastUpdateTimeDiffFirstF = now.millis - lastUpdateFirstF.previousState.timestamp.time
// end
