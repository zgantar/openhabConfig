rule "Time of lower price electricity start weekdays"
when
	Time cron "0 0 22 ? * MON-FRI"
then
	sendCommand(LowElectricity, ON)
	logDebug("electricity", "Začetek poceni elektrike - " + LowElectricity.state)
end	

rule "Time of lower price electricity end weekdays"
when
	Time cron "0 0 6 ? * MON-FRI"
then
	sendCommand(LowElectricity, OFF)
	logDebug("electricity", "Konec poceni elektrike - " + LowElectricity.state)
end
 
rule "Set things up"
when
	System started
then
	//setting the price of electricity
	logDebug("electricity", "Ura je - " + now.toString)
	if (now.getHour > 6 && now.getHour < 22 && (now.getDayOfWeek != 6 && now.getDayOfWeek != 7)) {
		sendCommand(LowElectricity, OFF)
	} else {
		sendCommand(LowElectricity, ON)
	}
	logDebug("electricity", "Poceni elektrika je - " + LowElectricity.state)
end

rule "Calculate hourly electricity consumption"
when
	Time cron "5 0 * * * ?"
then
	logDebug("electricity", "#####################Starting calculations for hourly electricity consumption values")
	gConsumption.members.forEach[ loopCons |
		logDebug("electricity", "============Calculating consumption for {} ===============", loopCons.toString)
		val calcCons = gCalcConsHour.members.filter(calcCons | calcCons.name.substring(4,7).equals((loopCons.name.substring(4,7)))).head
		if (calcCons !== null) {
			logDebug("electricity", "The calculated item is " + calcCons.toString)
			var time = now.minusHours(1)
			logDebug("electricity", "Calculating from " + time)
			var tempCons = loopCons.deltaSince(now.minusHours(1).minusSeconds(6)) as Number
			logDebug("electricity", "The delta consumption is " + tempCons)
			if (tempCons == null) tempCons = 0
			postUpdate(calcCons, tempCons)
			calcCons.persist
			logDebug("electricity", "Saved the calculated consumption for {}", calcCons.toString)
		}
	]
	logDebug("electricity", "#####################Ended calculations for hourly electricity consumption values")
end

rule "Calculate daily electricity consumption"
when
	Time cron "10 0 0 * * ? *"
then
	logDebug("electricity", "#####################Starting calculations for daily electricity consumption values")
	gConsumption.members.forEach[ loopCons |
		logDebug("electricity", "============Calculating consumption for {} ============", loopCons.toString)
		val calcCons = gCalcConsDay.members.filter(calcCons | calcCons.name.substring(4,7).equals((loopCons.name.substring(4,7)))).head
		if (calcCons !== null) {
			logDebug("electricity", "The calculated item is " + calcCons.toString)
			var time = now.minusDays(1)
			logDebug("electricity", "Calculating from " + time)
			var tempCons = loopCons.deltaSince(now.minusDays(1).minusSeconds(6)) as Number
			logDebug("electricity", "The calculated consumption is " + tempCons)
			if (tempCons == null) tempCons = 0
			postUpdate(calcCons, tempCons)
			calcCons.persist
			logDebug("electricity", "Saved the calculated consumption for {}", calcCons.toString)
		}
	]
	logDebug("electricity", "#####################Ended calculations for daily electricity consumption values")
end


rule "Calculate monthly electricity consumption"
when
	Time cron "15 0 0 1 * ?"
then
	logDebug("electricity", "#####################Starting calculations for monthly electricity consumption values")
	gConsumption.members.forEach[ loopCons |
		logDebug("electricity", "============Calculating consumption for {} ============", loopCons.toString)
		val calcCons = gCalcConsMonth.members.filter(calcCons | calcCons.name.substring(4,7).equals((loopCons.name.substring(4,7)))).head
		if (calcCons !== null) {
			logDebug("electricity", "The calculated item is " + calcCons.toString)
			var time = now.minusMonths(1)
			logDebug("electricity", "Calculating from " + time)
			var tempCons = loopCons.deltaSince(now.minusMonths(1).minusSeconds(6)) as Number
			logDebug("electricity", "The calculated consumption is " + tempCons)
			if (tempCons == null) tempCons = 0
			postUpdate(calcCons, tempCons)
			calcCons.persist
			logDebug("electricity", "Saved the calculated consumption for {}", calcCons.toString)
		}
	]
	logDebug("electricity", "#####################Ended calculations for monthly electricity consumption values")
end


rule "Set all necessary variables for electricity"
when
	System started
then
	logDebug("electricity", "Setting up all needed variables!")
	gCalcConsDay.members.forEach[ item |
		logDebug("electricity", "Setting up item " + item)
		if (item.state == NULL) item.postUpdate(0.0)
		logDebug("electricity", "Item set up " + item.toString)
	]
	gCalcConsHour.members.forEach[ item |
		logDebug("electricity", "Setting up item " + item)
		if (item.state == NULL) item.postUpdate(0.0)
		logDebug("electricity", "Item set up " + item.toString)
	]
	logDebug("electricity", "Needed variables all set up")
end